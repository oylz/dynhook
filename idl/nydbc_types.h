/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef nydbc_TYPES_H
#define nydbc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace com { namespace yealink { namespace dbc { namespace idl {

struct db_exception_code {
  enum type {
    E_NONE = 0,
    E_EXCEPT_START = 710000,
    E_NONINTERACT_BATCH_OVER_LIMITED = 710001,
    E_INTERACT_BATCH_OVER_LIMITED = 710002,
    E_BATCH_AUTH_FAILED = 710003,
    E_BATCH_NOT_EXIST = 710004,
    E_SQL_INTERNAL_ERROR = 710005,
    E_REDIS_INTERNAL_ERROR = 710006,
    E_PARAMETER_ERROR = 710007,
    E_REDIS_KEY_OR_FIELD_NOT_EXIST = 710008,
    E_REDIS_LOCK_OWNER_NO_MATCH = 710009,
    E_REDIS_LOCK_RESOURCE_IN_USE = 710010
  };
};

extern const std::map<int, const char*> _db_exception_code_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const db_exception_code::type& val);

struct transaction_isolation_level {
  enum type {
    TIL_RU = 0,
    TIL_RC = 1,
    TIL_RR = 2,
    TIL_SI = 3,
    TIL_SSI = 4
  };
};

extern const std::map<int, const char*> _transaction_isolation_level_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const transaction_isolation_level::type& val);

class db_exception;

class sql_batch;

class sql_batch_filter;

class db_lock;

class sql_query_filter;

class sql_update_filter;

class sql_update_return;

class redis_del_filter;

class redis_set_filter;

class redis_hmsetex_filter;

class region;

class region_filter;

class region_out;

typedef struct _db_exception__isset {
  _db_exception__isset() : code(false), str(false) {}
  bool code :1;
  bool str :1;
} _db_exception__isset;

class db_exception : public ::apache::thrift::TException {
 public:

  db_exception(const db_exception&);
  db_exception& operator=(const db_exception&);
  db_exception() : code(0), str() {
  }

  virtual ~db_exception() throw();
  int32_t code;
  std::string str;

  _db_exception__isset __isset;

  void __set_code(const int32_t val);

  void __set_str(const std::string& val);

  bool operator == (const db_exception & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(str == rhs.str))
      return false;
    return true;
  }
  bool operator != (const db_exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const db_exception & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(db_exception &a, db_exception &b);

std::ostream& operator<<(std::ostream& out, const db_exception& obj);

typedef struct _sql_batch__isset {
  _sql_batch__isset() : k(false), t(false), r(false) {}
  bool k :1;
  bool t :1;
  bool r :1;
} _sql_batch__isset;

class sql_batch : public virtual ::apache::thrift::TBase {
 public:

  sql_batch(const sql_batch&);
  sql_batch& operator=(const sql_batch&);
  sql_batch() : k(), t(0), r() {
  }

  virtual ~sql_batch() throw();
  std::string k;
  int64_t t;
  std::string r;

  _sql_batch__isset __isset;

  void __set_k(const std::string& val);

  void __set_t(const int64_t val);

  void __set_r(const std::string& val);

  bool operator == (const sql_batch & rhs) const
  {
    if (!(k == rhs.k))
      return false;
    if (!(t == rhs.t))
      return false;
    if (!(r == rhs.r))
      return false;
    return true;
  }
  bool operator != (const sql_batch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sql_batch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sql_batch &a, sql_batch &b);

std::ostream& operator<<(std::ostream& out, const sql_batch& obj);

typedef struct _sql_batch_filter__isset {
  _sql_batch_filter__isset() : interact(false), til(false) {}
  bool interact :1;
  bool til :1;
} _sql_batch_filter__isset;

class sql_batch_filter : public virtual ::apache::thrift::TBase {
 public:

  sql_batch_filter(const sql_batch_filter&);
  sql_batch_filter& operator=(const sql_batch_filter&);
  sql_batch_filter() : interact(0), til((transaction_isolation_level::type)0) {
  }

  virtual ~sql_batch_filter() throw();
  bool interact;
  transaction_isolation_level::type til;

  _sql_batch_filter__isset __isset;

  void __set_interact(const bool val);

  void __set_til(const transaction_isolation_level::type val);

  bool operator == (const sql_batch_filter & rhs) const
  {
    if (__isset.interact != rhs.__isset.interact)
      return false;
    else if (__isset.interact && !(interact == rhs.interact))
      return false;
    if (__isset.til != rhs.__isset.til)
      return false;
    else if (__isset.til && !(til == rhs.til))
      return false;
    return true;
  }
  bool operator != (const sql_batch_filter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sql_batch_filter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sql_batch_filter &a, sql_batch_filter &b);

std::ostream& operator<<(std::ostream& out, const sql_batch_filter& obj);

typedef struct _db_lock__isset {
  _db_lock__isset() : keys(false), owner(false), hold_time_mseconds(false), try_time_mseconds(false), remark(false) {}
  bool keys :1;
  bool owner :1;
  bool hold_time_mseconds :1;
  bool try_time_mseconds :1;
  bool remark :1;
} _db_lock__isset;

class db_lock : public virtual ::apache::thrift::TBase {
 public:

  db_lock(const db_lock&);
  db_lock& operator=(const db_lock&);
  db_lock() : owner(), hold_time_mseconds(0), try_time_mseconds(0), remark() {
  }

  virtual ~db_lock() throw();
  std::vector<std::string>  keys;
  std::string owner;
  int64_t hold_time_mseconds;
  int64_t try_time_mseconds;
  std::string remark;

  _db_lock__isset __isset;

  void __set_keys(const std::vector<std::string> & val);

  void __set_owner(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  void __set_try_time_mseconds(const int64_t val);

  void __set_remark(const std::string& val);

  bool operator == (const db_lock & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (__isset.hold_time_mseconds != rhs.__isset.hold_time_mseconds)
      return false;
    else if (__isset.hold_time_mseconds && !(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    if (__isset.try_time_mseconds != rhs.__isset.try_time_mseconds)
      return false;
    else if (__isset.try_time_mseconds && !(try_time_mseconds == rhs.try_time_mseconds))
      return false;
    if (__isset.remark != rhs.__isset.remark)
      return false;
    else if (__isset.remark && !(remark == rhs.remark))
      return false;
    return true;
  }
  bool operator != (const db_lock &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const db_lock & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(db_lock &a, db_lock &b);

std::ostream& operator<<(std::ostream& out, const db_lock& obj);

typedef struct _sql_query_filter__isset {
  _sql_query_filter__isset() : sql(false), batch(false) {}
  bool sql :1;
  bool batch :1;
} _sql_query_filter__isset;

class sql_query_filter : public virtual ::apache::thrift::TBase {
 public:

  sql_query_filter(const sql_query_filter&);
  sql_query_filter& operator=(const sql_query_filter&);
  sql_query_filter() : sql() {
  }

  virtual ~sql_query_filter() throw();
  std::string sql;
  sql_batch batch;

  _sql_query_filter__isset __isset;

  void __set_sql(const std::string& val);

  void __set_batch(const sql_batch& val);

  bool operator == (const sql_query_filter & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    if (__isset.batch != rhs.__isset.batch)
      return false;
    else if (__isset.batch && !(batch == rhs.batch))
      return false;
    return true;
  }
  bool operator != (const sql_query_filter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sql_query_filter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sql_query_filter &a, sql_query_filter &b);

std::ostream& operator<<(std::ostream& out, const sql_query_filter& obj);

typedef struct _sql_update_filter__isset {
  _sql_update_filter__isset() : sql(false), batch(false) {}
  bool sql :1;
  bool batch :1;
} _sql_update_filter__isset;

class sql_update_filter : public virtual ::apache::thrift::TBase {
 public:

  sql_update_filter(const sql_update_filter&);
  sql_update_filter& operator=(const sql_update_filter&);
  sql_update_filter() : sql() {
  }

  virtual ~sql_update_filter() throw();
  std::string sql;
  sql_batch batch;

  _sql_update_filter__isset __isset;

  void __set_sql(const std::string& val);

  void __set_batch(const sql_batch& val);

  bool operator == (const sql_update_filter & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    if (__isset.batch != rhs.__isset.batch)
      return false;
    else if (__isset.batch && !(batch == rhs.batch))
      return false;
    return true;
  }
  bool operator != (const sql_update_filter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sql_update_filter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sql_update_filter &a, sql_update_filter &b);

std::ostream& operator<<(std::ostream& out, const sql_update_filter& obj);

typedef struct _sql_update_return__isset {
  _sql_update_return__isset() : cols(false), rows(false) {}
  bool cols :1;
  bool rows :1;
} _sql_update_return__isset;

class sql_update_return : public virtual ::apache::thrift::TBase {
 public:

  sql_update_return(const sql_update_return&);
  sql_update_return& operator=(const sql_update_return&);
  sql_update_return() {
  }

  virtual ~sql_update_return() throw();
  std::vector<std::string>  cols;
  std::vector<std::vector<std::string> >  rows;

  _sql_update_return__isset __isset;

  void __set_cols(const std::vector<std::string> & val);

  void __set_rows(const std::vector<std::vector<std::string> > & val);

  bool operator == (const sql_update_return & rhs) const
  {
    if (!(cols == rhs.cols))
      return false;
    if (__isset.rows != rhs.__isset.rows)
      return false;
    else if (__isset.rows && !(rows == rhs.rows))
      return false;
    return true;
  }
  bool operator != (const sql_update_return &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sql_update_return & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sql_update_return &a, sql_update_return &b);

std::ostream& operator<<(std::ostream& out, const sql_update_return& obj);

typedef struct _redis_del_filter__isset {
  _redis_del_filter__isset() : keys(false) {}
  bool keys :1;
} _redis_del_filter__isset;

class redis_del_filter : public virtual ::apache::thrift::TBase {
 public:

  redis_del_filter(const redis_del_filter&);
  redis_del_filter& operator=(const redis_del_filter&);
  redis_del_filter() {
  }

  virtual ~redis_del_filter() throw();
  std::vector<std::string>  keys;

  _redis_del_filter__isset __isset;

  void __set_keys(const std::vector<std::string> & val);

  bool operator == (const redis_del_filter & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const redis_del_filter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const redis_del_filter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(redis_del_filter &a, redis_del_filter &b);

std::ostream& operator<<(std::ostream& out, const redis_del_filter& obj);

typedef struct _redis_set_filter__isset {
  _redis_set_filter__isset() : key(false), value(false), hold_time_mseconds(false), set_if_not_exist(false) {}
  bool key :1;
  bool value :1;
  bool hold_time_mseconds :1;
  bool set_if_not_exist :1;
} _redis_set_filter__isset;

class redis_set_filter : public virtual ::apache::thrift::TBase {
 public:

  redis_set_filter(const redis_set_filter&);
  redis_set_filter& operator=(const redis_set_filter&);
  redis_set_filter() : key(), value(), hold_time_mseconds(0), set_if_not_exist(0) {
  }

  virtual ~redis_set_filter() throw();
  std::string key;
  std::string value;
  int64_t hold_time_mseconds;
  bool set_if_not_exist;

  _redis_set_filter__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  void __set_set_if_not_exist(const bool val);

  bool operator == (const redis_set_filter & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.hold_time_mseconds != rhs.__isset.hold_time_mseconds)
      return false;
    else if (__isset.hold_time_mseconds && !(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    if (__isset.set_if_not_exist != rhs.__isset.set_if_not_exist)
      return false;
    else if (__isset.set_if_not_exist && !(set_if_not_exist == rhs.set_if_not_exist))
      return false;
    return true;
  }
  bool operator != (const redis_set_filter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const redis_set_filter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(redis_set_filter &a, redis_set_filter &b);

std::ostream& operator<<(std::ostream& out, const redis_set_filter& obj);

typedef struct _redis_hmsetex_filter__isset {
  _redis_hmsetex_filter__isset() : field(false), value(false), hold_time_mseconds(false) {}
  bool field :1;
  bool value :1;
  bool hold_time_mseconds :1;
} _redis_hmsetex_filter__isset;

class redis_hmsetex_filter : public virtual ::apache::thrift::TBase {
 public:

  redis_hmsetex_filter(const redis_hmsetex_filter&);
  redis_hmsetex_filter& operator=(const redis_hmsetex_filter&);
  redis_hmsetex_filter() : field(), value(), hold_time_mseconds(0) {
  }

  virtual ~redis_hmsetex_filter() throw();
  std::string field;
  std::string value;
  int64_t hold_time_mseconds;

  _redis_hmsetex_filter__isset __isset;

  void __set_field(const std::string& val);

  void __set_value(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const redis_hmsetex_filter & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const redis_hmsetex_filter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const redis_hmsetex_filter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(redis_hmsetex_filter &a, redis_hmsetex_filter &b);

std::ostream& operator<<(std::ostream& out, const redis_hmsetex_filter& obj);

typedef struct _region__isset {
  _region__isset() : country(false), area(false), master_id(false), slave_id(false) {}
  bool country :1;
  bool area :1;
  bool master_id :1;
  bool slave_id :1;
} _region__isset;

class region : public virtual ::apache::thrift::TBase {
 public:

  region(const region&);
  region& operator=(const region&);
  region() : country(), area(), master_id(), slave_id() {
  }

  virtual ~region() throw();
  std::string country;
  std::string area;
  std::string master_id;
  std::string slave_id;

  _region__isset __isset;

  void __set_country(const std::string& val);

  void __set_area(const std::string& val);

  void __set_master_id(const std::string& val);

  void __set_slave_id(const std::string& val);

  bool operator == (const region & rhs) const
  {
    if (!(country == rhs.country))
      return false;
    if (!(area == rhs.area))
      return false;
    if (!(master_id == rhs.master_id))
      return false;
    if (!(slave_id == rhs.slave_id))
      return false;
    return true;
  }
  bool operator != (const region &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const region & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(region &a, region &b);

std::ostream& operator<<(std::ostream& out, const region& obj);

typedef struct _region_filter__isset {
  _region_filter__isset() : version(false) {}
  bool version :1;
} _region_filter__isset;

class region_filter : public virtual ::apache::thrift::TBase {
 public:

  region_filter(const region_filter&);
  region_filter& operator=(const region_filter&);
  region_filter() : version(0) {
  }

  virtual ~region_filter() throw();
  int64_t version;

  _region_filter__isset __isset;

  void __set_version(const int64_t val);

  bool operator == (const region_filter & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const region_filter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const region_filter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(region_filter &a, region_filter &b);

std::ostream& operator<<(std::ostream& out, const region_filter& obj);

typedef struct _region_out__isset {
  _region_out__isset() : reg(false), version(false) {}
  bool reg :1;
  bool version :1;
} _region_out__isset;

class region_out : public virtual ::apache::thrift::TBase {
 public:

  region_out(const region_out&);
  region_out& operator=(const region_out&);
  region_out() : version(0) {
  }

  virtual ~region_out() throw();
  region reg;
  int64_t version;

  _region_out__isset __isset;

  void __set_reg(const region& val);

  void __set_version(const int64_t val);

  bool operator == (const region_out & rhs) const
  {
    if (!(reg == rhs.reg))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const region_out &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const region_out & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(region_out &a, region_out &b);

std::ostream& operator<<(std::ostream& out, const region_out& obj);

}}}} // namespace

#endif
