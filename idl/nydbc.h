/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef nydbc_H
#define nydbc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "nydbc_types.h"

namespace com { namespace yealink { namespace dbc { namespace idl {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class nydbcIf {
 public:
  virtual ~nydbcIf() {}
  virtual bool ping() = 0;
  virtual void start(sql_batch& _return, const sql_batch_filter& filter) = 0;
  virtual bool commit(const sql_batch& batch) = 0;
  virtual bool rollback(const sql_batch& batch) = 0;
  virtual void lock(std::string& _return, const db_lock& lock) = 0;
  virtual bool unlock(const std::string& lock, const std::string& owner) = 0;
  virtual bool uplock(const std::string& lock, const std::string& owner, const int64_t hold_time_mseconds) = 0;
  virtual void sql_query(std::vector<std::map<std::string, std::string> > & _return, const sql_query_filter& filter) = 0;
  virtual int64_t sql_update(const sql_update_filter& filter) = 0;
  virtual void sql_update_with_return(sql_update_return& _return, const sql_update_filter& filter) = 0;
  virtual bool redis_pexpire(const std::string& key, const int64_t hold_time_mseconds) = 0;
  virtual int64_t redis_del(const redis_del_filter& filter) = 0;
  virtual int64_t redis_incrby(const std::string& key, const int64_t step) = 0;
  virtual bool redis_set(const redis_set_filter& filter) = 0;
  virtual void redis_get(std::string& _return, const std::string& key) = 0;
  virtual bool redis_hset(const std::string& key, const std::string& hkey, const std::string& value) = 0;
  virtual bool redis_hmset(const std::string& key, const std::map<std::string, std::string> & fvs) = 0;
  virtual int64_t redis_hdel(const std::string& key, const std::string& hkey) = 0;
  virtual int64_t redis_hmdel(const std::string& key, const std::set<std::string> & hkeys) = 0;
  virtual void redis_hget(std::string& _return, const std::string& key, const std::string& hkey) = 0;
  virtual void redis_hmget(std::map<std::string, std::string> & _return, const std::string& key, const std::set<std::string> & hks) = 0;
  virtual int64_t redis_hlen(const std::string& key) = 0;
  virtual void redis_hgetall(std::map<std::string, std::string> & _return, const std::string& key) = 0;
  virtual void redis_keys(std::vector<std::string> & _return, const std::string& reg) = 0;
  virtual bool redis_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds) = 0;
  virtual bool redis_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts) = 0;
  virtual void redis_hgetex(std::string& _return, const std::string& key, const std::string& hkey) = 0;
  virtual void redis_hmgetex(std::map<std::string, std::string> & _return, const std::string& key, const std::set<std::string> & hkeys) = 0;
  virtual bool redis_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds) = 0;
  virtual int64_t redis_hdelex(const std::string& key, const std::set<std::string> & hkeys) = 0;
  virtual int64_t redis_hlenex(const std::string& key) = 0;
  virtual void redis_hgetallex(std::map<std::string, std::string> & _return, const std::string& key) = 0;
  virtual bool redis_pexpireex(const std::string& key, const int64_t hold_time_mseconds) = 0;

  /**
   * **************************region*************************
   * 
   * @param filter
   */
  virtual void get_region(std::vector<region_out> & _return, const region_filter& filter) = 0;
  virtual bool put_region(const std::vector<region> & regions) = 0;

  /**
   * ********************redis_global_************************
   * 
   * @param key
   * @param hold_time_mseconds
   */
  virtual bool redis_global_pexpire(const std::string& key, const int64_t hold_time_mseconds) = 0;
  virtual int64_t redis_global_del(const redis_del_filter& filter) = 0;
  virtual bool redis_global_set(const redis_set_filter& filter) = 0;
  virtual bool redis_global_hset(const std::string& key, const std::string& hkey, const std::string& value) = 0;
  virtual bool redis_global_hmset(const std::string& key, const std::map<std::string, std::string> & fvs) = 0;
  virtual int64_t redis_global_hdel(const std::string& key, const std::string& hkey) = 0;
  virtual int64_t redis_global_hmdel(const std::string& key, const std::set<std::string> & hkeys) = 0;
  virtual bool redis_global_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds) = 0;
  virtual bool redis_global_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts) = 0;
  virtual bool redis_global_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds) = 0;
  virtual int64_t redis_global_hdelex(const std::string& key, const std::set<std::string> & hkeys) = 0;
  virtual bool redis_global_pexpireex(const std::string& key, const int64_t hold_time_mseconds) = 0;

  /**
   * ********************redis_peer_************************
   * 
   * @param key
   * @param hold_time_mseconds
   */
  virtual bool redis_peer_pexpire(const std::string& key, const int64_t hold_time_mseconds) = 0;
  virtual int64_t redis_peer_del(const redis_del_filter& filter) = 0;
  virtual bool redis_peer_set(const redis_set_filter& filter) = 0;
  virtual bool redis_peer_hset(const std::string& key, const std::string& hkey, const std::string& value) = 0;
  virtual bool redis_peer_hmset(const std::string& key, const std::map<std::string, std::string> & fvs) = 0;
  virtual int64_t redis_peer_hdel(const std::string& key, const std::string& hkey) = 0;
  virtual int64_t redis_peer_hmdel(const std::string& key, const std::set<std::string> & hkeys) = 0;
  virtual bool redis_peer_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds) = 0;
  virtual bool redis_peer_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts) = 0;
  virtual bool redis_peer_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds) = 0;
  virtual int64_t redis_peer_hdelex(const std::string& key, const std::set<std::string> & hkeys) = 0;
  virtual bool redis_peer_pexpireex(const std::string& key, const int64_t hold_time_mseconds) = 0;
};

class nydbcIfFactory {
 public:
  typedef nydbcIf Handler;

  virtual ~nydbcIfFactory() {}

  virtual nydbcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(nydbcIf* /* handler */) = 0;
};

class nydbcIfSingletonFactory : virtual public nydbcIfFactory {
 public:
  nydbcIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<nydbcIf>& iface) : iface_(iface) {}
  virtual ~nydbcIfSingletonFactory() {}

  virtual nydbcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(nydbcIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<nydbcIf> iface_;
};

class nydbcNull : virtual public nydbcIf {
 public:
  virtual ~nydbcNull() {}
  bool ping() {
    bool _return = false;
    return _return;
  }
  void start(sql_batch& /* _return */, const sql_batch_filter& /* filter */) {
    return;
  }
  bool commit(const sql_batch& /* batch */) {
    bool _return = false;
    return _return;
  }
  bool rollback(const sql_batch& /* batch */) {
    bool _return = false;
    return _return;
  }
  void lock(std::string& /* _return */, const db_lock& /* lock */) {
    return;
  }
  bool unlock(const std::string& /* lock */, const std::string& /* owner */) {
    bool _return = false;
    return _return;
  }
  bool uplock(const std::string& /* lock */, const std::string& /* owner */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  void sql_query(std::vector<std::map<std::string, std::string> > & /* _return */, const sql_query_filter& /* filter */) {
    return;
  }
  int64_t sql_update(const sql_update_filter& /* filter */) {
    int64_t _return = 0;
    return _return;
  }
  void sql_update_with_return(sql_update_return& /* _return */, const sql_update_filter& /* filter */) {
    return;
  }
  bool redis_pexpire(const std::string& /* key */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  int64_t redis_del(const redis_del_filter& /* filter */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t redis_incrby(const std::string& /* key */, const int64_t /* step */) {
    int64_t _return = 0;
    return _return;
  }
  bool redis_set(const redis_set_filter& /* filter */) {
    bool _return = false;
    return _return;
  }
  void redis_get(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  bool redis_hset(const std::string& /* key */, const std::string& /* hkey */, const std::string& /* value */) {
    bool _return = false;
    return _return;
  }
  bool redis_hmset(const std::string& /* key */, const std::map<std::string, std::string> & /* fvs */) {
    bool _return = false;
    return _return;
  }
  int64_t redis_hdel(const std::string& /* key */, const std::string& /* hkey */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t redis_hmdel(const std::string& /* key */, const std::set<std::string> & /* hkeys */) {
    int64_t _return = 0;
    return _return;
  }
  void redis_hget(std::string& /* _return */, const std::string& /* key */, const std::string& /* hkey */) {
    return;
  }
  void redis_hmget(std::map<std::string, std::string> & /* _return */, const std::string& /* key */, const std::set<std::string> & /* hks */) {
    return;
  }
  int64_t redis_hlen(const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void redis_hgetall(std::map<std::string, std::string> & /* _return */, const std::string& /* key */) {
    return;
  }
  void redis_keys(std::vector<std::string> & /* _return */, const std::string& /* reg */) {
    return;
  }
  bool redis_hsetex(const std::string& /* key */, const std::string& /* hkey */, const std::string& /* value */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  bool redis_hmsetex(const std::string& /* key */, const std::vector<redis_hmsetex_filter> & /* fvts */) {
    bool _return = false;
    return _return;
  }
  void redis_hgetex(std::string& /* _return */, const std::string& /* key */, const std::string& /* hkey */) {
    return;
  }
  void redis_hmgetex(std::map<std::string, std::string> & /* _return */, const std::string& /* key */, const std::set<std::string> & /* hkeys */) {
    return;
  }
  bool redis_hexpire(const std::string& /* key */, const std::string& /* field */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  int64_t redis_hdelex(const std::string& /* key */, const std::set<std::string> & /* hkeys */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t redis_hlenex(const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void redis_hgetallex(std::map<std::string, std::string> & /* _return */, const std::string& /* key */) {
    return;
  }
  bool redis_pexpireex(const std::string& /* key */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  void get_region(std::vector<region_out> & /* _return */, const region_filter& /* filter */) {
    return;
  }
  bool put_region(const std::vector<region> & /* regions */) {
    bool _return = false;
    return _return;
  }
  bool redis_global_pexpire(const std::string& /* key */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  int64_t redis_global_del(const redis_del_filter& /* filter */) {
    int64_t _return = 0;
    return _return;
  }
  bool redis_global_set(const redis_set_filter& /* filter */) {
    bool _return = false;
    return _return;
  }
  bool redis_global_hset(const std::string& /* key */, const std::string& /* hkey */, const std::string& /* value */) {
    bool _return = false;
    return _return;
  }
  bool redis_global_hmset(const std::string& /* key */, const std::map<std::string, std::string> & /* fvs */) {
    bool _return = false;
    return _return;
  }
  int64_t redis_global_hdel(const std::string& /* key */, const std::string& /* hkey */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t redis_global_hmdel(const std::string& /* key */, const std::set<std::string> & /* hkeys */) {
    int64_t _return = 0;
    return _return;
  }
  bool redis_global_hsetex(const std::string& /* key */, const std::string& /* hkey */, const std::string& /* value */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  bool redis_global_hmsetex(const std::string& /* key */, const std::vector<redis_hmsetex_filter> & /* fvts */) {
    bool _return = false;
    return _return;
  }
  bool redis_global_hexpire(const std::string& /* key */, const std::string& /* field */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  int64_t redis_global_hdelex(const std::string& /* key */, const std::set<std::string> & /* hkeys */) {
    int64_t _return = 0;
    return _return;
  }
  bool redis_global_pexpireex(const std::string& /* key */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  bool redis_peer_pexpire(const std::string& /* key */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  int64_t redis_peer_del(const redis_del_filter& /* filter */) {
    int64_t _return = 0;
    return _return;
  }
  bool redis_peer_set(const redis_set_filter& /* filter */) {
    bool _return = false;
    return _return;
  }
  bool redis_peer_hset(const std::string& /* key */, const std::string& /* hkey */, const std::string& /* value */) {
    bool _return = false;
    return _return;
  }
  bool redis_peer_hmset(const std::string& /* key */, const std::map<std::string, std::string> & /* fvs */) {
    bool _return = false;
    return _return;
  }
  int64_t redis_peer_hdel(const std::string& /* key */, const std::string& /* hkey */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t redis_peer_hmdel(const std::string& /* key */, const std::set<std::string> & /* hkeys */) {
    int64_t _return = 0;
    return _return;
  }
  bool redis_peer_hsetex(const std::string& /* key */, const std::string& /* hkey */, const std::string& /* value */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  bool redis_peer_hmsetex(const std::string& /* key */, const std::vector<redis_hmsetex_filter> & /* fvts */) {
    bool _return = false;
    return _return;
  }
  bool redis_peer_hexpire(const std::string& /* key */, const std::string& /* field */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
  int64_t redis_peer_hdelex(const std::string& /* key */, const std::set<std::string> & /* hkeys */) {
    int64_t _return = 0;
    return _return;
  }
  bool redis_peer_pexpireex(const std::string& /* key */, const int64_t /* hold_time_mseconds */) {
    bool _return = false;
    return _return;
  }
};


class nydbc_ping_args {
 public:

  nydbc_ping_args(const nydbc_ping_args&);
  nydbc_ping_args& operator=(const nydbc_ping_args&);
  nydbc_ping_args() {
  }

  virtual ~nydbc_ping_args() throw();

  bool operator == (const nydbc_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const nydbc_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_ping_pargs {
 public:


  virtual ~nydbc_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_ping_result__isset {
  _nydbc_ping_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_ping_result__isset;

class nydbc_ping_result {
 public:

  nydbc_ping_result(const nydbc_ping_result&);
  nydbc_ping_result& operator=(const nydbc_ping_result&);
  nydbc_ping_result() : success(0) {
  }

  virtual ~nydbc_ping_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_ping_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_ping_presult__isset {
  _nydbc_ping_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_ping_presult__isset;

class nydbc_ping_presult {
 public:


  virtual ~nydbc_ping_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_start_args__isset {
  _nydbc_start_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_start_args__isset;

class nydbc_start_args {
 public:

  nydbc_start_args(const nydbc_start_args&);
  nydbc_start_args& operator=(const nydbc_start_args&);
  nydbc_start_args() {
  }

  virtual ~nydbc_start_args() throw();
  sql_batch_filter filter;

  _nydbc_start_args__isset __isset;

  void __set_filter(const sql_batch_filter& val);

  bool operator == (const nydbc_start_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_start_pargs {
 public:


  virtual ~nydbc_start_pargs() throw();
  const sql_batch_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_start_result__isset {
  _nydbc_start_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_start_result__isset;

class nydbc_start_result {
 public:

  nydbc_start_result(const nydbc_start_result&);
  nydbc_start_result& operator=(const nydbc_start_result&);
  nydbc_start_result() {
  }

  virtual ~nydbc_start_result() throw();
  sql_batch success;
  db_exception dberr;

  _nydbc_start_result__isset __isset;

  void __set_success(const sql_batch& val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_start_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_start_presult__isset {
  _nydbc_start_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_start_presult__isset;

class nydbc_start_presult {
 public:


  virtual ~nydbc_start_presult() throw();
  sql_batch* success;
  db_exception dberr;

  _nydbc_start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_commit_args__isset {
  _nydbc_commit_args__isset() : batch(false) {}
  bool batch :1;
} _nydbc_commit_args__isset;

class nydbc_commit_args {
 public:

  nydbc_commit_args(const nydbc_commit_args&);
  nydbc_commit_args& operator=(const nydbc_commit_args&);
  nydbc_commit_args() {
  }

  virtual ~nydbc_commit_args() throw();
  sql_batch batch;

  _nydbc_commit_args__isset __isset;

  void __set_batch(const sql_batch& val);

  bool operator == (const nydbc_commit_args & rhs) const
  {
    if (!(batch == rhs.batch))
      return false;
    return true;
  }
  bool operator != (const nydbc_commit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_commit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_commit_pargs {
 public:


  virtual ~nydbc_commit_pargs() throw();
  const sql_batch* batch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_commit_result__isset {
  _nydbc_commit_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_commit_result__isset;

class nydbc_commit_result {
 public:

  nydbc_commit_result(const nydbc_commit_result&);
  nydbc_commit_result& operator=(const nydbc_commit_result&);
  nydbc_commit_result() : success(0) {
  }

  virtual ~nydbc_commit_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_commit_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_commit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_commit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_commit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_commit_presult__isset {
  _nydbc_commit_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_commit_presult__isset;

class nydbc_commit_presult {
 public:


  virtual ~nydbc_commit_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_commit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_rollback_args__isset {
  _nydbc_rollback_args__isset() : batch(false) {}
  bool batch :1;
} _nydbc_rollback_args__isset;

class nydbc_rollback_args {
 public:

  nydbc_rollback_args(const nydbc_rollback_args&);
  nydbc_rollback_args& operator=(const nydbc_rollback_args&);
  nydbc_rollback_args() {
  }

  virtual ~nydbc_rollback_args() throw();
  sql_batch batch;

  _nydbc_rollback_args__isset __isset;

  void __set_batch(const sql_batch& val);

  bool operator == (const nydbc_rollback_args & rhs) const
  {
    if (!(batch == rhs.batch))
      return false;
    return true;
  }
  bool operator != (const nydbc_rollback_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_rollback_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_rollback_pargs {
 public:


  virtual ~nydbc_rollback_pargs() throw();
  const sql_batch* batch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_rollback_result__isset {
  _nydbc_rollback_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_rollback_result__isset;

class nydbc_rollback_result {
 public:

  nydbc_rollback_result(const nydbc_rollback_result&);
  nydbc_rollback_result& operator=(const nydbc_rollback_result&);
  nydbc_rollback_result() : success(0) {
  }

  virtual ~nydbc_rollback_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_rollback_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_rollback_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_rollback_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_rollback_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_rollback_presult__isset {
  _nydbc_rollback_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_rollback_presult__isset;

class nydbc_rollback_presult {
 public:


  virtual ~nydbc_rollback_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_rollback_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_lock_args__isset {
  _nydbc_lock_args__isset() : lock(false) {}
  bool lock :1;
} _nydbc_lock_args__isset;

class nydbc_lock_args {
 public:

  nydbc_lock_args(const nydbc_lock_args&);
  nydbc_lock_args& operator=(const nydbc_lock_args&);
  nydbc_lock_args() {
  }

  virtual ~nydbc_lock_args() throw();
  db_lock lock;

  _nydbc_lock_args__isset __isset;

  void __set_lock(const db_lock& val);

  bool operator == (const nydbc_lock_args & rhs) const
  {
    if (!(lock == rhs.lock))
      return false;
    return true;
  }
  bool operator != (const nydbc_lock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_lock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_lock_pargs {
 public:


  virtual ~nydbc_lock_pargs() throw();
  const db_lock* lock;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_lock_result__isset {
  _nydbc_lock_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_lock_result__isset;

class nydbc_lock_result {
 public:

  nydbc_lock_result(const nydbc_lock_result&);
  nydbc_lock_result& operator=(const nydbc_lock_result&);
  nydbc_lock_result() : success() {
  }

  virtual ~nydbc_lock_result() throw();
  std::string success;
  db_exception dberr;

  _nydbc_lock_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_lock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_lock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_lock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_lock_presult__isset {
  _nydbc_lock_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_lock_presult__isset;

class nydbc_lock_presult {
 public:


  virtual ~nydbc_lock_presult() throw();
  std::string* success;
  db_exception dberr;

  _nydbc_lock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_unlock_args__isset {
  _nydbc_unlock_args__isset() : lock(false), owner(false) {}
  bool lock :1;
  bool owner :1;
} _nydbc_unlock_args__isset;

class nydbc_unlock_args {
 public:

  nydbc_unlock_args(const nydbc_unlock_args&);
  nydbc_unlock_args& operator=(const nydbc_unlock_args&);
  nydbc_unlock_args() : lock(), owner() {
  }

  virtual ~nydbc_unlock_args() throw();
  std::string lock;
  std::string owner;

  _nydbc_unlock_args__isset __isset;

  void __set_lock(const std::string& val);

  void __set_owner(const std::string& val);

  bool operator == (const nydbc_unlock_args & rhs) const
  {
    if (!(lock == rhs.lock))
      return false;
    if (!(owner == rhs.owner))
      return false;
    return true;
  }
  bool operator != (const nydbc_unlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_unlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_unlock_pargs {
 public:


  virtual ~nydbc_unlock_pargs() throw();
  const std::string* lock;
  const std::string* owner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_unlock_result__isset {
  _nydbc_unlock_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_unlock_result__isset;

class nydbc_unlock_result {
 public:

  nydbc_unlock_result(const nydbc_unlock_result&);
  nydbc_unlock_result& operator=(const nydbc_unlock_result&);
  nydbc_unlock_result() : success(0) {
  }

  virtual ~nydbc_unlock_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_unlock_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_unlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_unlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_unlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_unlock_presult__isset {
  _nydbc_unlock_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_unlock_presult__isset;

class nydbc_unlock_presult {
 public:


  virtual ~nydbc_unlock_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_unlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_uplock_args__isset {
  _nydbc_uplock_args__isset() : lock(false), owner(false), hold_time_mseconds(false) {}
  bool lock :1;
  bool owner :1;
  bool hold_time_mseconds :1;
} _nydbc_uplock_args__isset;

class nydbc_uplock_args {
 public:

  nydbc_uplock_args(const nydbc_uplock_args&);
  nydbc_uplock_args& operator=(const nydbc_uplock_args&);
  nydbc_uplock_args() : lock(), owner(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_uplock_args() throw();
  std::string lock;
  std::string owner;
  int64_t hold_time_mseconds;

  _nydbc_uplock_args__isset __isset;

  void __set_lock(const std::string& val);

  void __set_owner(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_uplock_args & rhs) const
  {
    if (!(lock == rhs.lock))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_uplock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_uplock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_uplock_pargs {
 public:


  virtual ~nydbc_uplock_pargs() throw();
  const std::string* lock;
  const std::string* owner;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_uplock_result__isset {
  _nydbc_uplock_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_uplock_result__isset;

class nydbc_uplock_result {
 public:

  nydbc_uplock_result(const nydbc_uplock_result&);
  nydbc_uplock_result& operator=(const nydbc_uplock_result&);
  nydbc_uplock_result() : success(0) {
  }

  virtual ~nydbc_uplock_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_uplock_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_uplock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_uplock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_uplock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_uplock_presult__isset {
  _nydbc_uplock_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_uplock_presult__isset;

class nydbc_uplock_presult {
 public:


  virtual ~nydbc_uplock_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_uplock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_sql_query_args__isset {
  _nydbc_sql_query_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_sql_query_args__isset;

class nydbc_sql_query_args {
 public:

  nydbc_sql_query_args(const nydbc_sql_query_args&);
  nydbc_sql_query_args& operator=(const nydbc_sql_query_args&);
  nydbc_sql_query_args() {
  }

  virtual ~nydbc_sql_query_args() throw();
  sql_query_filter filter;

  _nydbc_sql_query_args__isset __isset;

  void __set_filter(const sql_query_filter& val);

  bool operator == (const nydbc_sql_query_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_sql_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_sql_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_sql_query_pargs {
 public:


  virtual ~nydbc_sql_query_pargs() throw();
  const sql_query_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_sql_query_result__isset {
  _nydbc_sql_query_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_sql_query_result__isset;

class nydbc_sql_query_result {
 public:

  nydbc_sql_query_result(const nydbc_sql_query_result&);
  nydbc_sql_query_result& operator=(const nydbc_sql_query_result&);
  nydbc_sql_query_result() {
  }

  virtual ~nydbc_sql_query_result() throw();
  std::vector<std::map<std::string, std::string> >  success;
  db_exception dberr;

  _nydbc_sql_query_result__isset __isset;

  void __set_success(const std::vector<std::map<std::string, std::string> > & val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_sql_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_sql_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_sql_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_sql_query_presult__isset {
  _nydbc_sql_query_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_sql_query_presult__isset;

class nydbc_sql_query_presult {
 public:


  virtual ~nydbc_sql_query_presult() throw();
  std::vector<std::map<std::string, std::string> > * success;
  db_exception dberr;

  _nydbc_sql_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_sql_update_args__isset {
  _nydbc_sql_update_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_sql_update_args__isset;

class nydbc_sql_update_args {
 public:

  nydbc_sql_update_args(const nydbc_sql_update_args&);
  nydbc_sql_update_args& operator=(const nydbc_sql_update_args&);
  nydbc_sql_update_args() {
  }

  virtual ~nydbc_sql_update_args() throw();
  sql_update_filter filter;

  _nydbc_sql_update_args__isset __isset;

  void __set_filter(const sql_update_filter& val);

  bool operator == (const nydbc_sql_update_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_sql_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_sql_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_sql_update_pargs {
 public:


  virtual ~nydbc_sql_update_pargs() throw();
  const sql_update_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_sql_update_result__isset {
  _nydbc_sql_update_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_sql_update_result__isset;

class nydbc_sql_update_result {
 public:

  nydbc_sql_update_result(const nydbc_sql_update_result&);
  nydbc_sql_update_result& operator=(const nydbc_sql_update_result&);
  nydbc_sql_update_result() : success(0) {
  }

  virtual ~nydbc_sql_update_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_sql_update_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_sql_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_sql_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_sql_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_sql_update_presult__isset {
  _nydbc_sql_update_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_sql_update_presult__isset;

class nydbc_sql_update_presult {
 public:


  virtual ~nydbc_sql_update_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_sql_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_sql_update_with_return_args__isset {
  _nydbc_sql_update_with_return_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_sql_update_with_return_args__isset;

class nydbc_sql_update_with_return_args {
 public:

  nydbc_sql_update_with_return_args(const nydbc_sql_update_with_return_args&);
  nydbc_sql_update_with_return_args& operator=(const nydbc_sql_update_with_return_args&);
  nydbc_sql_update_with_return_args() {
  }

  virtual ~nydbc_sql_update_with_return_args() throw();
  sql_update_filter filter;

  _nydbc_sql_update_with_return_args__isset __isset;

  void __set_filter(const sql_update_filter& val);

  bool operator == (const nydbc_sql_update_with_return_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_sql_update_with_return_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_sql_update_with_return_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_sql_update_with_return_pargs {
 public:


  virtual ~nydbc_sql_update_with_return_pargs() throw();
  const sql_update_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_sql_update_with_return_result__isset {
  _nydbc_sql_update_with_return_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_sql_update_with_return_result__isset;

class nydbc_sql_update_with_return_result {
 public:

  nydbc_sql_update_with_return_result(const nydbc_sql_update_with_return_result&);
  nydbc_sql_update_with_return_result& operator=(const nydbc_sql_update_with_return_result&);
  nydbc_sql_update_with_return_result() {
  }

  virtual ~nydbc_sql_update_with_return_result() throw();
  sql_update_return success;
  db_exception dberr;

  _nydbc_sql_update_with_return_result__isset __isset;

  void __set_success(const sql_update_return& val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_sql_update_with_return_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_sql_update_with_return_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_sql_update_with_return_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_sql_update_with_return_presult__isset {
  _nydbc_sql_update_with_return_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_sql_update_with_return_presult__isset;

class nydbc_sql_update_with_return_presult {
 public:


  virtual ~nydbc_sql_update_with_return_presult() throw();
  sql_update_return* success;
  db_exception dberr;

  _nydbc_sql_update_with_return_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_pexpire_args__isset {
  _nydbc_redis_pexpire_args__isset() : key(false), hold_time_mseconds(false) {}
  bool key :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_pexpire_args__isset;

class nydbc_redis_pexpire_args {
 public:

  nydbc_redis_pexpire_args(const nydbc_redis_pexpire_args&);
  nydbc_redis_pexpire_args& operator=(const nydbc_redis_pexpire_args&);
  nydbc_redis_pexpire_args() : key(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_pexpire_args() throw();
  std::string key;
  int64_t hold_time_mseconds;

  _nydbc_redis_pexpire_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_pexpire_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_pexpire_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_pexpire_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_pexpire_pargs {
 public:


  virtual ~nydbc_redis_pexpire_pargs() throw();
  const std::string* key;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_pexpire_result__isset {
  _nydbc_redis_pexpire_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_pexpire_result__isset;

class nydbc_redis_pexpire_result {
 public:

  nydbc_redis_pexpire_result(const nydbc_redis_pexpire_result&);
  nydbc_redis_pexpire_result& operator=(const nydbc_redis_pexpire_result&);
  nydbc_redis_pexpire_result() : success(0) {
  }

  virtual ~nydbc_redis_pexpire_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_pexpire_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_pexpire_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_pexpire_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_pexpire_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_pexpire_presult__isset {
  _nydbc_redis_pexpire_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_pexpire_presult__isset;

class nydbc_redis_pexpire_presult {
 public:


  virtual ~nydbc_redis_pexpire_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_pexpire_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_del_args__isset {
  _nydbc_redis_del_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_redis_del_args__isset;

class nydbc_redis_del_args {
 public:

  nydbc_redis_del_args(const nydbc_redis_del_args&);
  nydbc_redis_del_args& operator=(const nydbc_redis_del_args&);
  nydbc_redis_del_args() {
  }

  virtual ~nydbc_redis_del_args() throw();
  redis_del_filter filter;

  _nydbc_redis_del_args__isset __isset;

  void __set_filter(const redis_del_filter& val);

  bool operator == (const nydbc_redis_del_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_del_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_del_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_del_pargs {
 public:


  virtual ~nydbc_redis_del_pargs() throw();
  const redis_del_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_del_result__isset {
  _nydbc_redis_del_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_del_result__isset;

class nydbc_redis_del_result {
 public:

  nydbc_redis_del_result(const nydbc_redis_del_result&);
  nydbc_redis_del_result& operator=(const nydbc_redis_del_result&);
  nydbc_redis_del_result() : success(0) {
  }

  virtual ~nydbc_redis_del_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_del_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_del_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_del_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_del_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_del_presult__isset {
  _nydbc_redis_del_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_del_presult__isset;

class nydbc_redis_del_presult {
 public:


  virtual ~nydbc_redis_del_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_del_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_incrby_args__isset {
  _nydbc_redis_incrby_args__isset() : key(false), step(false) {}
  bool key :1;
  bool step :1;
} _nydbc_redis_incrby_args__isset;

class nydbc_redis_incrby_args {
 public:

  nydbc_redis_incrby_args(const nydbc_redis_incrby_args&);
  nydbc_redis_incrby_args& operator=(const nydbc_redis_incrby_args&);
  nydbc_redis_incrby_args() : key(), step(0) {
  }

  virtual ~nydbc_redis_incrby_args() throw();
  std::string key;
  int64_t step;

  _nydbc_redis_incrby_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_step(const int64_t val);

  bool operator == (const nydbc_redis_incrby_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(step == rhs.step))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_incrby_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_incrby_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_incrby_pargs {
 public:


  virtual ~nydbc_redis_incrby_pargs() throw();
  const std::string* key;
  const int64_t* step;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_incrby_result__isset {
  _nydbc_redis_incrby_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_incrby_result__isset;

class nydbc_redis_incrby_result {
 public:

  nydbc_redis_incrby_result(const nydbc_redis_incrby_result&);
  nydbc_redis_incrby_result& operator=(const nydbc_redis_incrby_result&);
  nydbc_redis_incrby_result() : success(0) {
  }

  virtual ~nydbc_redis_incrby_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_incrby_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_incrby_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_incrby_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_incrby_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_incrby_presult__isset {
  _nydbc_redis_incrby_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_incrby_presult__isset;

class nydbc_redis_incrby_presult {
 public:


  virtual ~nydbc_redis_incrby_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_incrby_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_set_args__isset {
  _nydbc_redis_set_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_redis_set_args__isset;

class nydbc_redis_set_args {
 public:

  nydbc_redis_set_args(const nydbc_redis_set_args&);
  nydbc_redis_set_args& operator=(const nydbc_redis_set_args&);
  nydbc_redis_set_args() {
  }

  virtual ~nydbc_redis_set_args() throw();
  redis_set_filter filter;

  _nydbc_redis_set_args__isset __isset;

  void __set_filter(const redis_set_filter& val);

  bool operator == (const nydbc_redis_set_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_set_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_set_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_set_pargs {
 public:


  virtual ~nydbc_redis_set_pargs() throw();
  const redis_set_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_set_result__isset {
  _nydbc_redis_set_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_set_result__isset;

class nydbc_redis_set_result {
 public:

  nydbc_redis_set_result(const nydbc_redis_set_result&);
  nydbc_redis_set_result& operator=(const nydbc_redis_set_result&);
  nydbc_redis_set_result() : success(0) {
  }

  virtual ~nydbc_redis_set_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_set_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_set_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_set_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_set_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_set_presult__isset {
  _nydbc_redis_set_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_set_presult__isset;

class nydbc_redis_set_presult {
 public:


  virtual ~nydbc_redis_set_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_set_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_get_args__isset {
  _nydbc_redis_get_args__isset() : key(false) {}
  bool key :1;
} _nydbc_redis_get_args__isset;

class nydbc_redis_get_args {
 public:

  nydbc_redis_get_args(const nydbc_redis_get_args&);
  nydbc_redis_get_args& operator=(const nydbc_redis_get_args&);
  nydbc_redis_get_args() : key() {
  }

  virtual ~nydbc_redis_get_args() throw();
  std::string key;

  _nydbc_redis_get_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const nydbc_redis_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_get_pargs {
 public:


  virtual ~nydbc_redis_get_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_get_result__isset {
  _nydbc_redis_get_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_get_result__isset;

class nydbc_redis_get_result {
 public:

  nydbc_redis_get_result(const nydbc_redis_get_result&);
  nydbc_redis_get_result& operator=(const nydbc_redis_get_result&);
  nydbc_redis_get_result() : success() {
  }

  virtual ~nydbc_redis_get_result() throw();
  std::string success;
  db_exception dberr;

  _nydbc_redis_get_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_get_presult__isset {
  _nydbc_redis_get_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_get_presult__isset;

class nydbc_redis_get_presult {
 public:


  virtual ~nydbc_redis_get_presult() throw();
  std::string* success;
  db_exception dberr;

  _nydbc_redis_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hset_args__isset {
  _nydbc_redis_hset_args__isset() : key(false), hkey(false), value(false) {}
  bool key :1;
  bool hkey :1;
  bool value :1;
} _nydbc_redis_hset_args__isset;

class nydbc_redis_hset_args {
 public:

  nydbc_redis_hset_args(const nydbc_redis_hset_args&);
  nydbc_redis_hset_args& operator=(const nydbc_redis_hset_args&);
  nydbc_redis_hset_args() : key(), hkey(), value() {
  }

  virtual ~nydbc_redis_hset_args() throw();
  std::string key;
  std::string hkey;
  std::string value;

  _nydbc_redis_hset_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const nydbc_redis_hset_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hset_pargs {
 public:


  virtual ~nydbc_redis_hset_pargs() throw();
  const std::string* key;
  const std::string* hkey;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hset_result__isset {
  _nydbc_redis_hset_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hset_result__isset;

class nydbc_redis_hset_result {
 public:

  nydbc_redis_hset_result(const nydbc_redis_hset_result&);
  nydbc_redis_hset_result& operator=(const nydbc_redis_hset_result&);
  nydbc_redis_hset_result() : success(0) {
  }

  virtual ~nydbc_redis_hset_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_hset_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hset_presult__isset {
  _nydbc_redis_hset_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hset_presult__isset;

class nydbc_redis_hset_presult {
 public:


  virtual ~nydbc_redis_hset_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_hset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hmset_args__isset {
  _nydbc_redis_hmset_args__isset() : key(false), fvs(false) {}
  bool key :1;
  bool fvs :1;
} _nydbc_redis_hmset_args__isset;

class nydbc_redis_hmset_args {
 public:

  nydbc_redis_hmset_args(const nydbc_redis_hmset_args&);
  nydbc_redis_hmset_args& operator=(const nydbc_redis_hmset_args&);
  nydbc_redis_hmset_args() : key() {
  }

  virtual ~nydbc_redis_hmset_args() throw();
  std::string key;
  std::map<std::string, std::string>  fvs;

  _nydbc_redis_hmset_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_fvs(const std::map<std::string, std::string> & val);

  bool operator == (const nydbc_redis_hmset_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(fvs == rhs.fvs))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hmset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hmset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hmset_pargs {
 public:


  virtual ~nydbc_redis_hmset_pargs() throw();
  const std::string* key;
  const std::map<std::string, std::string> * fvs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hmset_result__isset {
  _nydbc_redis_hmset_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hmset_result__isset;

class nydbc_redis_hmset_result {
 public:

  nydbc_redis_hmset_result(const nydbc_redis_hmset_result&);
  nydbc_redis_hmset_result& operator=(const nydbc_redis_hmset_result&);
  nydbc_redis_hmset_result() : success(0) {
  }

  virtual ~nydbc_redis_hmset_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_hmset_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hmset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hmset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hmset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hmset_presult__isset {
  _nydbc_redis_hmset_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hmset_presult__isset;

class nydbc_redis_hmset_presult {
 public:


  virtual ~nydbc_redis_hmset_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_hmset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hdel_args__isset {
  _nydbc_redis_hdel_args__isset() : key(false), hkey(false) {}
  bool key :1;
  bool hkey :1;
} _nydbc_redis_hdel_args__isset;

class nydbc_redis_hdel_args {
 public:

  nydbc_redis_hdel_args(const nydbc_redis_hdel_args&);
  nydbc_redis_hdel_args& operator=(const nydbc_redis_hdel_args&);
  nydbc_redis_hdel_args() : key(), hkey() {
  }

  virtual ~nydbc_redis_hdel_args() throw();
  std::string key;
  std::string hkey;

  _nydbc_redis_hdel_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  bool operator == (const nydbc_redis_hdel_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hdel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hdel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hdel_pargs {
 public:


  virtual ~nydbc_redis_hdel_pargs() throw();
  const std::string* key;
  const std::string* hkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hdel_result__isset {
  _nydbc_redis_hdel_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hdel_result__isset;

class nydbc_redis_hdel_result {
 public:

  nydbc_redis_hdel_result(const nydbc_redis_hdel_result&);
  nydbc_redis_hdel_result& operator=(const nydbc_redis_hdel_result&);
  nydbc_redis_hdel_result() : success(0) {
  }

  virtual ~nydbc_redis_hdel_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_hdel_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hdel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hdel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hdel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hdel_presult__isset {
  _nydbc_redis_hdel_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hdel_presult__isset;

class nydbc_redis_hdel_presult {
 public:


  virtual ~nydbc_redis_hdel_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_hdel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hmdel_args__isset {
  _nydbc_redis_hmdel_args__isset() : key(false), hkeys(false) {}
  bool key :1;
  bool hkeys :1;
} _nydbc_redis_hmdel_args__isset;

class nydbc_redis_hmdel_args {
 public:

  nydbc_redis_hmdel_args(const nydbc_redis_hmdel_args&);
  nydbc_redis_hmdel_args& operator=(const nydbc_redis_hmdel_args&);
  nydbc_redis_hmdel_args() : key() {
  }

  virtual ~nydbc_redis_hmdel_args() throw();
  std::string key;
  std::set<std::string>  hkeys;

  _nydbc_redis_hmdel_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkeys(const std::set<std::string> & val);

  bool operator == (const nydbc_redis_hmdel_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkeys == rhs.hkeys))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hmdel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hmdel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hmdel_pargs {
 public:


  virtual ~nydbc_redis_hmdel_pargs() throw();
  const std::string* key;
  const std::set<std::string> * hkeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hmdel_result__isset {
  _nydbc_redis_hmdel_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hmdel_result__isset;

class nydbc_redis_hmdel_result {
 public:

  nydbc_redis_hmdel_result(const nydbc_redis_hmdel_result&);
  nydbc_redis_hmdel_result& operator=(const nydbc_redis_hmdel_result&);
  nydbc_redis_hmdel_result() : success(0) {
  }

  virtual ~nydbc_redis_hmdel_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_hmdel_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hmdel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hmdel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hmdel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hmdel_presult__isset {
  _nydbc_redis_hmdel_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hmdel_presult__isset;

class nydbc_redis_hmdel_presult {
 public:


  virtual ~nydbc_redis_hmdel_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_hmdel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hget_args__isset {
  _nydbc_redis_hget_args__isset() : key(false), hkey(false) {}
  bool key :1;
  bool hkey :1;
} _nydbc_redis_hget_args__isset;

class nydbc_redis_hget_args {
 public:

  nydbc_redis_hget_args(const nydbc_redis_hget_args&);
  nydbc_redis_hget_args& operator=(const nydbc_redis_hget_args&);
  nydbc_redis_hget_args() : key(), hkey() {
  }

  virtual ~nydbc_redis_hget_args() throw();
  std::string key;
  std::string hkey;

  _nydbc_redis_hget_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  bool operator == (const nydbc_redis_hget_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hget_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hget_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hget_pargs {
 public:


  virtual ~nydbc_redis_hget_pargs() throw();
  const std::string* key;
  const std::string* hkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hget_result__isset {
  _nydbc_redis_hget_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hget_result__isset;

class nydbc_redis_hget_result {
 public:

  nydbc_redis_hget_result(const nydbc_redis_hget_result&);
  nydbc_redis_hget_result& operator=(const nydbc_redis_hget_result&);
  nydbc_redis_hget_result() : success() {
  }

  virtual ~nydbc_redis_hget_result() throw();
  std::string success;
  db_exception dberr;

  _nydbc_redis_hget_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hget_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hget_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hget_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hget_presult__isset {
  _nydbc_redis_hget_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hget_presult__isset;

class nydbc_redis_hget_presult {
 public:


  virtual ~nydbc_redis_hget_presult() throw();
  std::string* success;
  db_exception dberr;

  _nydbc_redis_hget_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hmget_args__isset {
  _nydbc_redis_hmget_args__isset() : key(false), hks(false) {}
  bool key :1;
  bool hks :1;
} _nydbc_redis_hmget_args__isset;

class nydbc_redis_hmget_args {
 public:

  nydbc_redis_hmget_args(const nydbc_redis_hmget_args&);
  nydbc_redis_hmget_args& operator=(const nydbc_redis_hmget_args&);
  nydbc_redis_hmget_args() : key() {
  }

  virtual ~nydbc_redis_hmget_args() throw();
  std::string key;
  std::set<std::string>  hks;

  _nydbc_redis_hmget_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hks(const std::set<std::string> & val);

  bool operator == (const nydbc_redis_hmget_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hks == rhs.hks))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hmget_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hmget_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hmget_pargs {
 public:


  virtual ~nydbc_redis_hmget_pargs() throw();
  const std::string* key;
  const std::set<std::string> * hks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hmget_result__isset {
  _nydbc_redis_hmget_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hmget_result__isset;

class nydbc_redis_hmget_result {
 public:

  nydbc_redis_hmget_result(const nydbc_redis_hmget_result&);
  nydbc_redis_hmget_result& operator=(const nydbc_redis_hmget_result&);
  nydbc_redis_hmget_result() {
  }

  virtual ~nydbc_redis_hmget_result() throw();
  std::map<std::string, std::string>  success;
  db_exception dberr;

  _nydbc_redis_hmget_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hmget_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hmget_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hmget_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hmget_presult__isset {
  _nydbc_redis_hmget_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hmget_presult__isset;

class nydbc_redis_hmget_presult {
 public:


  virtual ~nydbc_redis_hmget_presult() throw();
  std::map<std::string, std::string> * success;
  db_exception dberr;

  _nydbc_redis_hmget_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hlen_args__isset {
  _nydbc_redis_hlen_args__isset() : key(false) {}
  bool key :1;
} _nydbc_redis_hlen_args__isset;

class nydbc_redis_hlen_args {
 public:

  nydbc_redis_hlen_args(const nydbc_redis_hlen_args&);
  nydbc_redis_hlen_args& operator=(const nydbc_redis_hlen_args&);
  nydbc_redis_hlen_args() : key() {
  }

  virtual ~nydbc_redis_hlen_args() throw();
  std::string key;

  _nydbc_redis_hlen_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const nydbc_redis_hlen_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hlen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hlen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hlen_pargs {
 public:


  virtual ~nydbc_redis_hlen_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hlen_result__isset {
  _nydbc_redis_hlen_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hlen_result__isset;

class nydbc_redis_hlen_result {
 public:

  nydbc_redis_hlen_result(const nydbc_redis_hlen_result&);
  nydbc_redis_hlen_result& operator=(const nydbc_redis_hlen_result&);
  nydbc_redis_hlen_result() : success(0) {
  }

  virtual ~nydbc_redis_hlen_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_hlen_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hlen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hlen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hlen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hlen_presult__isset {
  _nydbc_redis_hlen_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hlen_presult__isset;

class nydbc_redis_hlen_presult {
 public:


  virtual ~nydbc_redis_hlen_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_hlen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hgetall_args__isset {
  _nydbc_redis_hgetall_args__isset() : key(false) {}
  bool key :1;
} _nydbc_redis_hgetall_args__isset;

class nydbc_redis_hgetall_args {
 public:

  nydbc_redis_hgetall_args(const nydbc_redis_hgetall_args&);
  nydbc_redis_hgetall_args& operator=(const nydbc_redis_hgetall_args&);
  nydbc_redis_hgetall_args() : key() {
  }

  virtual ~nydbc_redis_hgetall_args() throw();
  std::string key;

  _nydbc_redis_hgetall_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const nydbc_redis_hgetall_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hgetall_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hgetall_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hgetall_pargs {
 public:


  virtual ~nydbc_redis_hgetall_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hgetall_result__isset {
  _nydbc_redis_hgetall_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hgetall_result__isset;

class nydbc_redis_hgetall_result {
 public:

  nydbc_redis_hgetall_result(const nydbc_redis_hgetall_result&);
  nydbc_redis_hgetall_result& operator=(const nydbc_redis_hgetall_result&);
  nydbc_redis_hgetall_result() {
  }

  virtual ~nydbc_redis_hgetall_result() throw();
  std::map<std::string, std::string>  success;
  db_exception dberr;

  _nydbc_redis_hgetall_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hgetall_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hgetall_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hgetall_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hgetall_presult__isset {
  _nydbc_redis_hgetall_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hgetall_presult__isset;

class nydbc_redis_hgetall_presult {
 public:


  virtual ~nydbc_redis_hgetall_presult() throw();
  std::map<std::string, std::string> * success;
  db_exception dberr;

  _nydbc_redis_hgetall_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_keys_args__isset {
  _nydbc_redis_keys_args__isset() : reg(false) {}
  bool reg :1;
} _nydbc_redis_keys_args__isset;

class nydbc_redis_keys_args {
 public:

  nydbc_redis_keys_args(const nydbc_redis_keys_args&);
  nydbc_redis_keys_args& operator=(const nydbc_redis_keys_args&);
  nydbc_redis_keys_args() : reg() {
  }

  virtual ~nydbc_redis_keys_args() throw();
  std::string reg;

  _nydbc_redis_keys_args__isset __isset;

  void __set_reg(const std::string& val);

  bool operator == (const nydbc_redis_keys_args & rhs) const
  {
    if (!(reg == rhs.reg))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_keys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_keys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_keys_pargs {
 public:


  virtual ~nydbc_redis_keys_pargs() throw();
  const std::string* reg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_keys_result__isset {
  _nydbc_redis_keys_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_keys_result__isset;

class nydbc_redis_keys_result {
 public:

  nydbc_redis_keys_result(const nydbc_redis_keys_result&);
  nydbc_redis_keys_result& operator=(const nydbc_redis_keys_result&);
  nydbc_redis_keys_result() {
  }

  virtual ~nydbc_redis_keys_result() throw();
  std::vector<std::string>  success;
  db_exception dberr;

  _nydbc_redis_keys_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_keys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_keys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_keys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_keys_presult__isset {
  _nydbc_redis_keys_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_keys_presult__isset;

class nydbc_redis_keys_presult {
 public:


  virtual ~nydbc_redis_keys_presult() throw();
  std::vector<std::string> * success;
  db_exception dberr;

  _nydbc_redis_keys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hsetex_args__isset {
  _nydbc_redis_hsetex_args__isset() : key(false), hkey(false), value(false), hold_time_mseconds(false) {}
  bool key :1;
  bool hkey :1;
  bool value :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_hsetex_args__isset;

class nydbc_redis_hsetex_args {
 public:

  nydbc_redis_hsetex_args(const nydbc_redis_hsetex_args&);
  nydbc_redis_hsetex_args& operator=(const nydbc_redis_hsetex_args&);
  nydbc_redis_hsetex_args() : key(), hkey(), value(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_hsetex_args() throw();
  std::string key;
  std::string hkey;
  std::string value;
  int64_t hold_time_mseconds;

  _nydbc_redis_hsetex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  void __set_value(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_hsetex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hsetex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hsetex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hsetex_pargs {
 public:


  virtual ~nydbc_redis_hsetex_pargs() throw();
  const std::string* key;
  const std::string* hkey;
  const std::string* value;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hsetex_result__isset {
  _nydbc_redis_hsetex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hsetex_result__isset;

class nydbc_redis_hsetex_result {
 public:

  nydbc_redis_hsetex_result(const nydbc_redis_hsetex_result&);
  nydbc_redis_hsetex_result& operator=(const nydbc_redis_hsetex_result&);
  nydbc_redis_hsetex_result() : success(0) {
  }

  virtual ~nydbc_redis_hsetex_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_hsetex_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hsetex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hsetex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hsetex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hsetex_presult__isset {
  _nydbc_redis_hsetex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hsetex_presult__isset;

class nydbc_redis_hsetex_presult {
 public:


  virtual ~nydbc_redis_hsetex_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_hsetex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hmsetex_args__isset {
  _nydbc_redis_hmsetex_args__isset() : key(false), fvts(false) {}
  bool key :1;
  bool fvts :1;
} _nydbc_redis_hmsetex_args__isset;

class nydbc_redis_hmsetex_args {
 public:

  nydbc_redis_hmsetex_args(const nydbc_redis_hmsetex_args&);
  nydbc_redis_hmsetex_args& operator=(const nydbc_redis_hmsetex_args&);
  nydbc_redis_hmsetex_args() : key() {
  }

  virtual ~nydbc_redis_hmsetex_args() throw();
  std::string key;
  std::vector<redis_hmsetex_filter>  fvts;

  _nydbc_redis_hmsetex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_fvts(const std::vector<redis_hmsetex_filter> & val);

  bool operator == (const nydbc_redis_hmsetex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(fvts == rhs.fvts))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hmsetex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hmsetex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hmsetex_pargs {
 public:


  virtual ~nydbc_redis_hmsetex_pargs() throw();
  const std::string* key;
  const std::vector<redis_hmsetex_filter> * fvts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hmsetex_result__isset {
  _nydbc_redis_hmsetex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hmsetex_result__isset;

class nydbc_redis_hmsetex_result {
 public:

  nydbc_redis_hmsetex_result(const nydbc_redis_hmsetex_result&);
  nydbc_redis_hmsetex_result& operator=(const nydbc_redis_hmsetex_result&);
  nydbc_redis_hmsetex_result() : success(0) {
  }

  virtual ~nydbc_redis_hmsetex_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_hmsetex_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hmsetex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hmsetex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hmsetex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hmsetex_presult__isset {
  _nydbc_redis_hmsetex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hmsetex_presult__isset;

class nydbc_redis_hmsetex_presult {
 public:


  virtual ~nydbc_redis_hmsetex_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_hmsetex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hgetex_args__isset {
  _nydbc_redis_hgetex_args__isset() : key(false), hkey(false) {}
  bool key :1;
  bool hkey :1;
} _nydbc_redis_hgetex_args__isset;

class nydbc_redis_hgetex_args {
 public:

  nydbc_redis_hgetex_args(const nydbc_redis_hgetex_args&);
  nydbc_redis_hgetex_args& operator=(const nydbc_redis_hgetex_args&);
  nydbc_redis_hgetex_args() : key(), hkey() {
  }

  virtual ~nydbc_redis_hgetex_args() throw();
  std::string key;
  std::string hkey;

  _nydbc_redis_hgetex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  bool operator == (const nydbc_redis_hgetex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hgetex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hgetex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hgetex_pargs {
 public:


  virtual ~nydbc_redis_hgetex_pargs() throw();
  const std::string* key;
  const std::string* hkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hgetex_result__isset {
  _nydbc_redis_hgetex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hgetex_result__isset;

class nydbc_redis_hgetex_result {
 public:

  nydbc_redis_hgetex_result(const nydbc_redis_hgetex_result&);
  nydbc_redis_hgetex_result& operator=(const nydbc_redis_hgetex_result&);
  nydbc_redis_hgetex_result() : success() {
  }

  virtual ~nydbc_redis_hgetex_result() throw();
  std::string success;
  db_exception dberr;

  _nydbc_redis_hgetex_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hgetex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hgetex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hgetex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hgetex_presult__isset {
  _nydbc_redis_hgetex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hgetex_presult__isset;

class nydbc_redis_hgetex_presult {
 public:


  virtual ~nydbc_redis_hgetex_presult() throw();
  std::string* success;
  db_exception dberr;

  _nydbc_redis_hgetex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hmgetex_args__isset {
  _nydbc_redis_hmgetex_args__isset() : key(false), hkeys(false) {}
  bool key :1;
  bool hkeys :1;
} _nydbc_redis_hmgetex_args__isset;

class nydbc_redis_hmgetex_args {
 public:

  nydbc_redis_hmgetex_args(const nydbc_redis_hmgetex_args&);
  nydbc_redis_hmgetex_args& operator=(const nydbc_redis_hmgetex_args&);
  nydbc_redis_hmgetex_args() : key() {
  }

  virtual ~nydbc_redis_hmgetex_args() throw();
  std::string key;
  std::set<std::string>  hkeys;

  _nydbc_redis_hmgetex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkeys(const std::set<std::string> & val);

  bool operator == (const nydbc_redis_hmgetex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkeys == rhs.hkeys))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hmgetex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hmgetex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hmgetex_pargs {
 public:


  virtual ~nydbc_redis_hmgetex_pargs() throw();
  const std::string* key;
  const std::set<std::string> * hkeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hmgetex_result__isset {
  _nydbc_redis_hmgetex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hmgetex_result__isset;

class nydbc_redis_hmgetex_result {
 public:

  nydbc_redis_hmgetex_result(const nydbc_redis_hmgetex_result&);
  nydbc_redis_hmgetex_result& operator=(const nydbc_redis_hmgetex_result&);
  nydbc_redis_hmgetex_result() {
  }

  virtual ~nydbc_redis_hmgetex_result() throw();
  std::map<std::string, std::string>  success;
  db_exception dberr;

  _nydbc_redis_hmgetex_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hmgetex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hmgetex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hmgetex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hmgetex_presult__isset {
  _nydbc_redis_hmgetex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hmgetex_presult__isset;

class nydbc_redis_hmgetex_presult {
 public:


  virtual ~nydbc_redis_hmgetex_presult() throw();
  std::map<std::string, std::string> * success;
  db_exception dberr;

  _nydbc_redis_hmgetex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hexpire_args__isset {
  _nydbc_redis_hexpire_args__isset() : key(false), field(false), hold_time_mseconds(false) {}
  bool key :1;
  bool field :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_hexpire_args__isset;

class nydbc_redis_hexpire_args {
 public:

  nydbc_redis_hexpire_args(const nydbc_redis_hexpire_args&);
  nydbc_redis_hexpire_args& operator=(const nydbc_redis_hexpire_args&);
  nydbc_redis_hexpire_args() : key(), field(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_hexpire_args() throw();
  std::string key;
  std::string field;
  int64_t hold_time_mseconds;

  _nydbc_redis_hexpire_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_field(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_hexpire_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hexpire_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hexpire_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hexpire_pargs {
 public:


  virtual ~nydbc_redis_hexpire_pargs() throw();
  const std::string* key;
  const std::string* field;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hexpire_result__isset {
  _nydbc_redis_hexpire_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hexpire_result__isset;

class nydbc_redis_hexpire_result {
 public:

  nydbc_redis_hexpire_result(const nydbc_redis_hexpire_result&);
  nydbc_redis_hexpire_result& operator=(const nydbc_redis_hexpire_result&);
  nydbc_redis_hexpire_result() : success(0) {
  }

  virtual ~nydbc_redis_hexpire_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_hexpire_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hexpire_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hexpire_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hexpire_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hexpire_presult__isset {
  _nydbc_redis_hexpire_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hexpire_presult__isset;

class nydbc_redis_hexpire_presult {
 public:


  virtual ~nydbc_redis_hexpire_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_hexpire_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hdelex_args__isset {
  _nydbc_redis_hdelex_args__isset() : key(false), hkeys(false) {}
  bool key :1;
  bool hkeys :1;
} _nydbc_redis_hdelex_args__isset;

class nydbc_redis_hdelex_args {
 public:

  nydbc_redis_hdelex_args(const nydbc_redis_hdelex_args&);
  nydbc_redis_hdelex_args& operator=(const nydbc_redis_hdelex_args&);
  nydbc_redis_hdelex_args() : key() {
  }

  virtual ~nydbc_redis_hdelex_args() throw();
  std::string key;
  std::set<std::string>  hkeys;

  _nydbc_redis_hdelex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkeys(const std::set<std::string> & val);

  bool operator == (const nydbc_redis_hdelex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkeys == rhs.hkeys))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hdelex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hdelex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hdelex_pargs {
 public:


  virtual ~nydbc_redis_hdelex_pargs() throw();
  const std::string* key;
  const std::set<std::string> * hkeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hdelex_result__isset {
  _nydbc_redis_hdelex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hdelex_result__isset;

class nydbc_redis_hdelex_result {
 public:

  nydbc_redis_hdelex_result(const nydbc_redis_hdelex_result&);
  nydbc_redis_hdelex_result& operator=(const nydbc_redis_hdelex_result&);
  nydbc_redis_hdelex_result() : success(0) {
  }

  virtual ~nydbc_redis_hdelex_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_hdelex_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hdelex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hdelex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hdelex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hdelex_presult__isset {
  _nydbc_redis_hdelex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hdelex_presult__isset;

class nydbc_redis_hdelex_presult {
 public:


  virtual ~nydbc_redis_hdelex_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_hdelex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hlenex_args__isset {
  _nydbc_redis_hlenex_args__isset() : key(false) {}
  bool key :1;
} _nydbc_redis_hlenex_args__isset;

class nydbc_redis_hlenex_args {
 public:

  nydbc_redis_hlenex_args(const nydbc_redis_hlenex_args&);
  nydbc_redis_hlenex_args& operator=(const nydbc_redis_hlenex_args&);
  nydbc_redis_hlenex_args() : key() {
  }

  virtual ~nydbc_redis_hlenex_args() throw();
  std::string key;

  _nydbc_redis_hlenex_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const nydbc_redis_hlenex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hlenex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hlenex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hlenex_pargs {
 public:


  virtual ~nydbc_redis_hlenex_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hlenex_result__isset {
  _nydbc_redis_hlenex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hlenex_result__isset;

class nydbc_redis_hlenex_result {
 public:

  nydbc_redis_hlenex_result(const nydbc_redis_hlenex_result&);
  nydbc_redis_hlenex_result& operator=(const nydbc_redis_hlenex_result&);
  nydbc_redis_hlenex_result() : success(0) {
  }

  virtual ~nydbc_redis_hlenex_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_hlenex_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hlenex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hlenex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hlenex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hlenex_presult__isset {
  _nydbc_redis_hlenex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hlenex_presult__isset;

class nydbc_redis_hlenex_presult {
 public:


  virtual ~nydbc_redis_hlenex_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_hlenex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_hgetallex_args__isset {
  _nydbc_redis_hgetallex_args__isset() : key(false) {}
  bool key :1;
} _nydbc_redis_hgetallex_args__isset;

class nydbc_redis_hgetallex_args {
 public:

  nydbc_redis_hgetallex_args(const nydbc_redis_hgetallex_args&);
  nydbc_redis_hgetallex_args& operator=(const nydbc_redis_hgetallex_args&);
  nydbc_redis_hgetallex_args() : key() {
  }

  virtual ~nydbc_redis_hgetallex_args() throw();
  std::string key;

  _nydbc_redis_hgetallex_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const nydbc_redis_hgetallex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hgetallex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hgetallex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_hgetallex_pargs {
 public:


  virtual ~nydbc_redis_hgetallex_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hgetallex_result__isset {
  _nydbc_redis_hgetallex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hgetallex_result__isset;

class nydbc_redis_hgetallex_result {
 public:

  nydbc_redis_hgetallex_result(const nydbc_redis_hgetallex_result&);
  nydbc_redis_hgetallex_result& operator=(const nydbc_redis_hgetallex_result&);
  nydbc_redis_hgetallex_result() {
  }

  virtual ~nydbc_redis_hgetallex_result() throw();
  std::map<std::string, std::string>  success;
  db_exception dberr;

  _nydbc_redis_hgetallex_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_hgetallex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_hgetallex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_hgetallex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_hgetallex_presult__isset {
  _nydbc_redis_hgetallex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_hgetallex_presult__isset;

class nydbc_redis_hgetallex_presult {
 public:


  virtual ~nydbc_redis_hgetallex_presult() throw();
  std::map<std::string, std::string> * success;
  db_exception dberr;

  _nydbc_redis_hgetallex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_pexpireex_args__isset {
  _nydbc_redis_pexpireex_args__isset() : key(false), hold_time_mseconds(false) {}
  bool key :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_pexpireex_args__isset;

class nydbc_redis_pexpireex_args {
 public:

  nydbc_redis_pexpireex_args(const nydbc_redis_pexpireex_args&);
  nydbc_redis_pexpireex_args& operator=(const nydbc_redis_pexpireex_args&);
  nydbc_redis_pexpireex_args() : key(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_pexpireex_args() throw();
  std::string key;
  int64_t hold_time_mseconds;

  _nydbc_redis_pexpireex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_pexpireex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_pexpireex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_pexpireex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_pexpireex_pargs {
 public:


  virtual ~nydbc_redis_pexpireex_pargs() throw();
  const std::string* key;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_pexpireex_result__isset {
  _nydbc_redis_pexpireex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_pexpireex_result__isset;

class nydbc_redis_pexpireex_result {
 public:

  nydbc_redis_pexpireex_result(const nydbc_redis_pexpireex_result&);
  nydbc_redis_pexpireex_result& operator=(const nydbc_redis_pexpireex_result&);
  nydbc_redis_pexpireex_result() : success(0) {
  }

  virtual ~nydbc_redis_pexpireex_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_pexpireex_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_pexpireex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_pexpireex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_pexpireex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_pexpireex_presult__isset {
  _nydbc_redis_pexpireex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_pexpireex_presult__isset;

class nydbc_redis_pexpireex_presult {
 public:


  virtual ~nydbc_redis_pexpireex_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_pexpireex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_get_region_args__isset {
  _nydbc_get_region_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_get_region_args__isset;

class nydbc_get_region_args {
 public:

  nydbc_get_region_args(const nydbc_get_region_args&);
  nydbc_get_region_args& operator=(const nydbc_get_region_args&);
  nydbc_get_region_args() {
  }

  virtual ~nydbc_get_region_args() throw();
  region_filter filter;

  _nydbc_get_region_args__isset __isset;

  void __set_filter(const region_filter& val);

  bool operator == (const nydbc_get_region_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_get_region_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_get_region_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_get_region_pargs {
 public:


  virtual ~nydbc_get_region_pargs() throw();
  const region_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_get_region_result__isset {
  _nydbc_get_region_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_get_region_result__isset;

class nydbc_get_region_result {
 public:

  nydbc_get_region_result(const nydbc_get_region_result&);
  nydbc_get_region_result& operator=(const nydbc_get_region_result&);
  nydbc_get_region_result() {
  }

  virtual ~nydbc_get_region_result() throw();
  std::vector<region_out>  success;
  db_exception dberr;

  _nydbc_get_region_result__isset __isset;

  void __set_success(const std::vector<region_out> & val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_get_region_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_get_region_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_get_region_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_get_region_presult__isset {
  _nydbc_get_region_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_get_region_presult__isset;

class nydbc_get_region_presult {
 public:


  virtual ~nydbc_get_region_presult() throw();
  std::vector<region_out> * success;
  db_exception dberr;

  _nydbc_get_region_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_put_region_args__isset {
  _nydbc_put_region_args__isset() : regions(false) {}
  bool regions :1;
} _nydbc_put_region_args__isset;

class nydbc_put_region_args {
 public:

  nydbc_put_region_args(const nydbc_put_region_args&);
  nydbc_put_region_args& operator=(const nydbc_put_region_args&);
  nydbc_put_region_args() {
  }

  virtual ~nydbc_put_region_args() throw();
  std::vector<region>  regions;

  _nydbc_put_region_args__isset __isset;

  void __set_regions(const std::vector<region> & val);

  bool operator == (const nydbc_put_region_args & rhs) const
  {
    if (!(regions == rhs.regions))
      return false;
    return true;
  }
  bool operator != (const nydbc_put_region_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_put_region_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_put_region_pargs {
 public:


  virtual ~nydbc_put_region_pargs() throw();
  const std::vector<region> * regions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_put_region_result__isset {
  _nydbc_put_region_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_put_region_result__isset;

class nydbc_put_region_result {
 public:

  nydbc_put_region_result(const nydbc_put_region_result&);
  nydbc_put_region_result& operator=(const nydbc_put_region_result&);
  nydbc_put_region_result() : success(0) {
  }

  virtual ~nydbc_put_region_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_put_region_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_put_region_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_put_region_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_put_region_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_put_region_presult__isset {
  _nydbc_put_region_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_put_region_presult__isset;

class nydbc_put_region_presult {
 public:


  virtual ~nydbc_put_region_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_put_region_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_pexpire_args__isset {
  _nydbc_redis_global_pexpire_args__isset() : key(false), hold_time_mseconds(false) {}
  bool key :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_global_pexpire_args__isset;

class nydbc_redis_global_pexpire_args {
 public:

  nydbc_redis_global_pexpire_args(const nydbc_redis_global_pexpire_args&);
  nydbc_redis_global_pexpire_args& operator=(const nydbc_redis_global_pexpire_args&);
  nydbc_redis_global_pexpire_args() : key(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_global_pexpire_args() throw();
  std::string key;
  int64_t hold_time_mseconds;

  _nydbc_redis_global_pexpire_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_global_pexpire_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_pexpire_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_pexpire_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_pexpire_pargs {
 public:


  virtual ~nydbc_redis_global_pexpire_pargs() throw();
  const std::string* key;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_pexpire_result__isset {
  _nydbc_redis_global_pexpire_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_pexpire_result__isset;

class nydbc_redis_global_pexpire_result {
 public:

  nydbc_redis_global_pexpire_result(const nydbc_redis_global_pexpire_result&);
  nydbc_redis_global_pexpire_result& operator=(const nydbc_redis_global_pexpire_result&);
  nydbc_redis_global_pexpire_result() : success(0) {
  }

  virtual ~nydbc_redis_global_pexpire_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_global_pexpire_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_pexpire_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_pexpire_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_pexpire_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_pexpire_presult__isset {
  _nydbc_redis_global_pexpire_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_pexpire_presult__isset;

class nydbc_redis_global_pexpire_presult {
 public:


  virtual ~nydbc_redis_global_pexpire_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_global_pexpire_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_del_args__isset {
  _nydbc_redis_global_del_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_redis_global_del_args__isset;

class nydbc_redis_global_del_args {
 public:

  nydbc_redis_global_del_args(const nydbc_redis_global_del_args&);
  nydbc_redis_global_del_args& operator=(const nydbc_redis_global_del_args&);
  nydbc_redis_global_del_args() {
  }

  virtual ~nydbc_redis_global_del_args() throw();
  redis_del_filter filter;

  _nydbc_redis_global_del_args__isset __isset;

  void __set_filter(const redis_del_filter& val);

  bool operator == (const nydbc_redis_global_del_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_del_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_del_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_del_pargs {
 public:


  virtual ~nydbc_redis_global_del_pargs() throw();
  const redis_del_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_del_result__isset {
  _nydbc_redis_global_del_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_del_result__isset;

class nydbc_redis_global_del_result {
 public:

  nydbc_redis_global_del_result(const nydbc_redis_global_del_result&);
  nydbc_redis_global_del_result& operator=(const nydbc_redis_global_del_result&);
  nydbc_redis_global_del_result() : success(0) {
  }

  virtual ~nydbc_redis_global_del_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_global_del_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_del_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_del_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_del_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_del_presult__isset {
  _nydbc_redis_global_del_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_del_presult__isset;

class nydbc_redis_global_del_presult {
 public:


  virtual ~nydbc_redis_global_del_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_global_del_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_set_args__isset {
  _nydbc_redis_global_set_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_redis_global_set_args__isset;

class nydbc_redis_global_set_args {
 public:

  nydbc_redis_global_set_args(const nydbc_redis_global_set_args&);
  nydbc_redis_global_set_args& operator=(const nydbc_redis_global_set_args&);
  nydbc_redis_global_set_args() {
  }

  virtual ~nydbc_redis_global_set_args() throw();
  redis_set_filter filter;

  _nydbc_redis_global_set_args__isset __isset;

  void __set_filter(const redis_set_filter& val);

  bool operator == (const nydbc_redis_global_set_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_set_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_set_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_set_pargs {
 public:


  virtual ~nydbc_redis_global_set_pargs() throw();
  const redis_set_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_set_result__isset {
  _nydbc_redis_global_set_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_set_result__isset;

class nydbc_redis_global_set_result {
 public:

  nydbc_redis_global_set_result(const nydbc_redis_global_set_result&);
  nydbc_redis_global_set_result& operator=(const nydbc_redis_global_set_result&);
  nydbc_redis_global_set_result() : success(0) {
  }

  virtual ~nydbc_redis_global_set_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_global_set_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_set_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_set_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_set_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_set_presult__isset {
  _nydbc_redis_global_set_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_set_presult__isset;

class nydbc_redis_global_set_presult {
 public:


  virtual ~nydbc_redis_global_set_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_global_set_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_hset_args__isset {
  _nydbc_redis_global_hset_args__isset() : key(false), hkey(false), value(false) {}
  bool key :1;
  bool hkey :1;
  bool value :1;
} _nydbc_redis_global_hset_args__isset;

class nydbc_redis_global_hset_args {
 public:

  nydbc_redis_global_hset_args(const nydbc_redis_global_hset_args&);
  nydbc_redis_global_hset_args& operator=(const nydbc_redis_global_hset_args&);
  nydbc_redis_global_hset_args() : key(), hkey(), value() {
  }

  virtual ~nydbc_redis_global_hset_args() throw();
  std::string key;
  std::string hkey;
  std::string value;

  _nydbc_redis_global_hset_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const nydbc_redis_global_hset_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_hset_pargs {
 public:


  virtual ~nydbc_redis_global_hset_pargs() throw();
  const std::string* key;
  const std::string* hkey;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hset_result__isset {
  _nydbc_redis_global_hset_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hset_result__isset;

class nydbc_redis_global_hset_result {
 public:

  nydbc_redis_global_hset_result(const nydbc_redis_global_hset_result&);
  nydbc_redis_global_hset_result& operator=(const nydbc_redis_global_hset_result&);
  nydbc_redis_global_hset_result() : success(0) {
  }

  virtual ~nydbc_redis_global_hset_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_global_hset_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_hset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hset_presult__isset {
  _nydbc_redis_global_hset_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hset_presult__isset;

class nydbc_redis_global_hset_presult {
 public:


  virtual ~nydbc_redis_global_hset_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_global_hset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_hmset_args__isset {
  _nydbc_redis_global_hmset_args__isset() : key(false), fvs(false) {}
  bool key :1;
  bool fvs :1;
} _nydbc_redis_global_hmset_args__isset;

class nydbc_redis_global_hmset_args {
 public:

  nydbc_redis_global_hmset_args(const nydbc_redis_global_hmset_args&);
  nydbc_redis_global_hmset_args& operator=(const nydbc_redis_global_hmset_args&);
  nydbc_redis_global_hmset_args() : key() {
  }

  virtual ~nydbc_redis_global_hmset_args() throw();
  std::string key;
  std::map<std::string, std::string>  fvs;

  _nydbc_redis_global_hmset_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_fvs(const std::map<std::string, std::string> & val);

  bool operator == (const nydbc_redis_global_hmset_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(fvs == rhs.fvs))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hmset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hmset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_hmset_pargs {
 public:


  virtual ~nydbc_redis_global_hmset_pargs() throw();
  const std::string* key;
  const std::map<std::string, std::string> * fvs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hmset_result__isset {
  _nydbc_redis_global_hmset_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hmset_result__isset;

class nydbc_redis_global_hmset_result {
 public:

  nydbc_redis_global_hmset_result(const nydbc_redis_global_hmset_result&);
  nydbc_redis_global_hmset_result& operator=(const nydbc_redis_global_hmset_result&);
  nydbc_redis_global_hmset_result() : success(0) {
  }

  virtual ~nydbc_redis_global_hmset_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_global_hmset_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_hmset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hmset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hmset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hmset_presult__isset {
  _nydbc_redis_global_hmset_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hmset_presult__isset;

class nydbc_redis_global_hmset_presult {
 public:


  virtual ~nydbc_redis_global_hmset_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_global_hmset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_hdel_args__isset {
  _nydbc_redis_global_hdel_args__isset() : key(false), hkey(false) {}
  bool key :1;
  bool hkey :1;
} _nydbc_redis_global_hdel_args__isset;

class nydbc_redis_global_hdel_args {
 public:

  nydbc_redis_global_hdel_args(const nydbc_redis_global_hdel_args&);
  nydbc_redis_global_hdel_args& operator=(const nydbc_redis_global_hdel_args&);
  nydbc_redis_global_hdel_args() : key(), hkey() {
  }

  virtual ~nydbc_redis_global_hdel_args() throw();
  std::string key;
  std::string hkey;

  _nydbc_redis_global_hdel_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  bool operator == (const nydbc_redis_global_hdel_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hdel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hdel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_hdel_pargs {
 public:


  virtual ~nydbc_redis_global_hdel_pargs() throw();
  const std::string* key;
  const std::string* hkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hdel_result__isset {
  _nydbc_redis_global_hdel_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hdel_result__isset;

class nydbc_redis_global_hdel_result {
 public:

  nydbc_redis_global_hdel_result(const nydbc_redis_global_hdel_result&);
  nydbc_redis_global_hdel_result& operator=(const nydbc_redis_global_hdel_result&);
  nydbc_redis_global_hdel_result() : success(0) {
  }

  virtual ~nydbc_redis_global_hdel_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_global_hdel_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_hdel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hdel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hdel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hdel_presult__isset {
  _nydbc_redis_global_hdel_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hdel_presult__isset;

class nydbc_redis_global_hdel_presult {
 public:


  virtual ~nydbc_redis_global_hdel_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_global_hdel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_hmdel_args__isset {
  _nydbc_redis_global_hmdel_args__isset() : key(false), hkeys(false) {}
  bool key :1;
  bool hkeys :1;
} _nydbc_redis_global_hmdel_args__isset;

class nydbc_redis_global_hmdel_args {
 public:

  nydbc_redis_global_hmdel_args(const nydbc_redis_global_hmdel_args&);
  nydbc_redis_global_hmdel_args& operator=(const nydbc_redis_global_hmdel_args&);
  nydbc_redis_global_hmdel_args() : key() {
  }

  virtual ~nydbc_redis_global_hmdel_args() throw();
  std::string key;
  std::set<std::string>  hkeys;

  _nydbc_redis_global_hmdel_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkeys(const std::set<std::string> & val);

  bool operator == (const nydbc_redis_global_hmdel_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkeys == rhs.hkeys))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hmdel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hmdel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_hmdel_pargs {
 public:


  virtual ~nydbc_redis_global_hmdel_pargs() throw();
  const std::string* key;
  const std::set<std::string> * hkeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hmdel_result__isset {
  _nydbc_redis_global_hmdel_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hmdel_result__isset;

class nydbc_redis_global_hmdel_result {
 public:

  nydbc_redis_global_hmdel_result(const nydbc_redis_global_hmdel_result&);
  nydbc_redis_global_hmdel_result& operator=(const nydbc_redis_global_hmdel_result&);
  nydbc_redis_global_hmdel_result() : success(0) {
  }

  virtual ~nydbc_redis_global_hmdel_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_global_hmdel_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_hmdel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hmdel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hmdel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hmdel_presult__isset {
  _nydbc_redis_global_hmdel_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hmdel_presult__isset;

class nydbc_redis_global_hmdel_presult {
 public:


  virtual ~nydbc_redis_global_hmdel_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_global_hmdel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_hsetex_args__isset {
  _nydbc_redis_global_hsetex_args__isset() : key(false), hkey(false), value(false), hold_time_mseconds(false) {}
  bool key :1;
  bool hkey :1;
  bool value :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_global_hsetex_args__isset;

class nydbc_redis_global_hsetex_args {
 public:

  nydbc_redis_global_hsetex_args(const nydbc_redis_global_hsetex_args&);
  nydbc_redis_global_hsetex_args& operator=(const nydbc_redis_global_hsetex_args&);
  nydbc_redis_global_hsetex_args() : key(), hkey(), value(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_global_hsetex_args() throw();
  std::string key;
  std::string hkey;
  std::string value;
  int64_t hold_time_mseconds;

  _nydbc_redis_global_hsetex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  void __set_value(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_global_hsetex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hsetex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hsetex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_hsetex_pargs {
 public:


  virtual ~nydbc_redis_global_hsetex_pargs() throw();
  const std::string* key;
  const std::string* hkey;
  const std::string* value;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hsetex_result__isset {
  _nydbc_redis_global_hsetex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hsetex_result__isset;

class nydbc_redis_global_hsetex_result {
 public:

  nydbc_redis_global_hsetex_result(const nydbc_redis_global_hsetex_result&);
  nydbc_redis_global_hsetex_result& operator=(const nydbc_redis_global_hsetex_result&);
  nydbc_redis_global_hsetex_result() : success(0) {
  }

  virtual ~nydbc_redis_global_hsetex_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_global_hsetex_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_hsetex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hsetex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hsetex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hsetex_presult__isset {
  _nydbc_redis_global_hsetex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hsetex_presult__isset;

class nydbc_redis_global_hsetex_presult {
 public:


  virtual ~nydbc_redis_global_hsetex_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_global_hsetex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_hmsetex_args__isset {
  _nydbc_redis_global_hmsetex_args__isset() : key(false), fvts(false) {}
  bool key :1;
  bool fvts :1;
} _nydbc_redis_global_hmsetex_args__isset;

class nydbc_redis_global_hmsetex_args {
 public:

  nydbc_redis_global_hmsetex_args(const nydbc_redis_global_hmsetex_args&);
  nydbc_redis_global_hmsetex_args& operator=(const nydbc_redis_global_hmsetex_args&);
  nydbc_redis_global_hmsetex_args() : key() {
  }

  virtual ~nydbc_redis_global_hmsetex_args() throw();
  std::string key;
  std::vector<redis_hmsetex_filter>  fvts;

  _nydbc_redis_global_hmsetex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_fvts(const std::vector<redis_hmsetex_filter> & val);

  bool operator == (const nydbc_redis_global_hmsetex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(fvts == rhs.fvts))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hmsetex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hmsetex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_hmsetex_pargs {
 public:


  virtual ~nydbc_redis_global_hmsetex_pargs() throw();
  const std::string* key;
  const std::vector<redis_hmsetex_filter> * fvts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hmsetex_result__isset {
  _nydbc_redis_global_hmsetex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hmsetex_result__isset;

class nydbc_redis_global_hmsetex_result {
 public:

  nydbc_redis_global_hmsetex_result(const nydbc_redis_global_hmsetex_result&);
  nydbc_redis_global_hmsetex_result& operator=(const nydbc_redis_global_hmsetex_result&);
  nydbc_redis_global_hmsetex_result() : success(0) {
  }

  virtual ~nydbc_redis_global_hmsetex_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_global_hmsetex_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_hmsetex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hmsetex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hmsetex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hmsetex_presult__isset {
  _nydbc_redis_global_hmsetex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hmsetex_presult__isset;

class nydbc_redis_global_hmsetex_presult {
 public:


  virtual ~nydbc_redis_global_hmsetex_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_global_hmsetex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_hexpire_args__isset {
  _nydbc_redis_global_hexpire_args__isset() : key(false), field(false), hold_time_mseconds(false) {}
  bool key :1;
  bool field :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_global_hexpire_args__isset;

class nydbc_redis_global_hexpire_args {
 public:

  nydbc_redis_global_hexpire_args(const nydbc_redis_global_hexpire_args&);
  nydbc_redis_global_hexpire_args& operator=(const nydbc_redis_global_hexpire_args&);
  nydbc_redis_global_hexpire_args() : key(), field(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_global_hexpire_args() throw();
  std::string key;
  std::string field;
  int64_t hold_time_mseconds;

  _nydbc_redis_global_hexpire_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_field(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_global_hexpire_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hexpire_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hexpire_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_hexpire_pargs {
 public:


  virtual ~nydbc_redis_global_hexpire_pargs() throw();
  const std::string* key;
  const std::string* field;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hexpire_result__isset {
  _nydbc_redis_global_hexpire_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hexpire_result__isset;

class nydbc_redis_global_hexpire_result {
 public:

  nydbc_redis_global_hexpire_result(const nydbc_redis_global_hexpire_result&);
  nydbc_redis_global_hexpire_result& operator=(const nydbc_redis_global_hexpire_result&);
  nydbc_redis_global_hexpire_result() : success(0) {
  }

  virtual ~nydbc_redis_global_hexpire_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_global_hexpire_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_hexpire_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hexpire_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hexpire_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hexpire_presult__isset {
  _nydbc_redis_global_hexpire_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hexpire_presult__isset;

class nydbc_redis_global_hexpire_presult {
 public:


  virtual ~nydbc_redis_global_hexpire_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_global_hexpire_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_hdelex_args__isset {
  _nydbc_redis_global_hdelex_args__isset() : key(false), hkeys(false) {}
  bool key :1;
  bool hkeys :1;
} _nydbc_redis_global_hdelex_args__isset;

class nydbc_redis_global_hdelex_args {
 public:

  nydbc_redis_global_hdelex_args(const nydbc_redis_global_hdelex_args&);
  nydbc_redis_global_hdelex_args& operator=(const nydbc_redis_global_hdelex_args&);
  nydbc_redis_global_hdelex_args() : key() {
  }

  virtual ~nydbc_redis_global_hdelex_args() throw();
  std::string key;
  std::set<std::string>  hkeys;

  _nydbc_redis_global_hdelex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkeys(const std::set<std::string> & val);

  bool operator == (const nydbc_redis_global_hdelex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkeys == rhs.hkeys))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hdelex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hdelex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_hdelex_pargs {
 public:


  virtual ~nydbc_redis_global_hdelex_pargs() throw();
  const std::string* key;
  const std::set<std::string> * hkeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hdelex_result__isset {
  _nydbc_redis_global_hdelex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hdelex_result__isset;

class nydbc_redis_global_hdelex_result {
 public:

  nydbc_redis_global_hdelex_result(const nydbc_redis_global_hdelex_result&);
  nydbc_redis_global_hdelex_result& operator=(const nydbc_redis_global_hdelex_result&);
  nydbc_redis_global_hdelex_result() : success(0) {
  }

  virtual ~nydbc_redis_global_hdelex_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_global_hdelex_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_hdelex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_hdelex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_hdelex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_hdelex_presult__isset {
  _nydbc_redis_global_hdelex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_hdelex_presult__isset;

class nydbc_redis_global_hdelex_presult {
 public:


  virtual ~nydbc_redis_global_hdelex_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_global_hdelex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_global_pexpireex_args__isset {
  _nydbc_redis_global_pexpireex_args__isset() : key(false), hold_time_mseconds(false) {}
  bool key :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_global_pexpireex_args__isset;

class nydbc_redis_global_pexpireex_args {
 public:

  nydbc_redis_global_pexpireex_args(const nydbc_redis_global_pexpireex_args&);
  nydbc_redis_global_pexpireex_args& operator=(const nydbc_redis_global_pexpireex_args&);
  nydbc_redis_global_pexpireex_args() : key(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_global_pexpireex_args() throw();
  std::string key;
  int64_t hold_time_mseconds;

  _nydbc_redis_global_pexpireex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_global_pexpireex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_pexpireex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_pexpireex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_global_pexpireex_pargs {
 public:


  virtual ~nydbc_redis_global_pexpireex_pargs() throw();
  const std::string* key;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_pexpireex_result__isset {
  _nydbc_redis_global_pexpireex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_pexpireex_result__isset;

class nydbc_redis_global_pexpireex_result {
 public:

  nydbc_redis_global_pexpireex_result(const nydbc_redis_global_pexpireex_result&);
  nydbc_redis_global_pexpireex_result& operator=(const nydbc_redis_global_pexpireex_result&);
  nydbc_redis_global_pexpireex_result() : success(0) {
  }

  virtual ~nydbc_redis_global_pexpireex_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_global_pexpireex_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_global_pexpireex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_global_pexpireex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_global_pexpireex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_global_pexpireex_presult__isset {
  _nydbc_redis_global_pexpireex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_global_pexpireex_presult__isset;

class nydbc_redis_global_pexpireex_presult {
 public:


  virtual ~nydbc_redis_global_pexpireex_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_global_pexpireex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_pexpire_args__isset {
  _nydbc_redis_peer_pexpire_args__isset() : key(false), hold_time_mseconds(false) {}
  bool key :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_peer_pexpire_args__isset;

class nydbc_redis_peer_pexpire_args {
 public:

  nydbc_redis_peer_pexpire_args(const nydbc_redis_peer_pexpire_args&);
  nydbc_redis_peer_pexpire_args& operator=(const nydbc_redis_peer_pexpire_args&);
  nydbc_redis_peer_pexpire_args() : key(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_peer_pexpire_args() throw();
  std::string key;
  int64_t hold_time_mseconds;

  _nydbc_redis_peer_pexpire_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_peer_pexpire_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_pexpire_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_pexpire_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_pexpire_pargs {
 public:


  virtual ~nydbc_redis_peer_pexpire_pargs() throw();
  const std::string* key;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_pexpire_result__isset {
  _nydbc_redis_peer_pexpire_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_pexpire_result__isset;

class nydbc_redis_peer_pexpire_result {
 public:

  nydbc_redis_peer_pexpire_result(const nydbc_redis_peer_pexpire_result&);
  nydbc_redis_peer_pexpire_result& operator=(const nydbc_redis_peer_pexpire_result&);
  nydbc_redis_peer_pexpire_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_pexpire_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_peer_pexpire_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_pexpire_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_pexpire_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_pexpire_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_pexpire_presult__isset {
  _nydbc_redis_peer_pexpire_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_pexpire_presult__isset;

class nydbc_redis_peer_pexpire_presult {
 public:


  virtual ~nydbc_redis_peer_pexpire_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_peer_pexpire_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_del_args__isset {
  _nydbc_redis_peer_del_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_redis_peer_del_args__isset;

class nydbc_redis_peer_del_args {
 public:

  nydbc_redis_peer_del_args(const nydbc_redis_peer_del_args&);
  nydbc_redis_peer_del_args& operator=(const nydbc_redis_peer_del_args&);
  nydbc_redis_peer_del_args() {
  }

  virtual ~nydbc_redis_peer_del_args() throw();
  redis_del_filter filter;

  _nydbc_redis_peer_del_args__isset __isset;

  void __set_filter(const redis_del_filter& val);

  bool operator == (const nydbc_redis_peer_del_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_del_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_del_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_del_pargs {
 public:


  virtual ~nydbc_redis_peer_del_pargs() throw();
  const redis_del_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_del_result__isset {
  _nydbc_redis_peer_del_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_del_result__isset;

class nydbc_redis_peer_del_result {
 public:

  nydbc_redis_peer_del_result(const nydbc_redis_peer_del_result&);
  nydbc_redis_peer_del_result& operator=(const nydbc_redis_peer_del_result&);
  nydbc_redis_peer_del_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_del_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_peer_del_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_del_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_del_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_del_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_del_presult__isset {
  _nydbc_redis_peer_del_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_del_presult__isset;

class nydbc_redis_peer_del_presult {
 public:


  virtual ~nydbc_redis_peer_del_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_peer_del_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_set_args__isset {
  _nydbc_redis_peer_set_args__isset() : filter(false) {}
  bool filter :1;
} _nydbc_redis_peer_set_args__isset;

class nydbc_redis_peer_set_args {
 public:

  nydbc_redis_peer_set_args(const nydbc_redis_peer_set_args&);
  nydbc_redis_peer_set_args& operator=(const nydbc_redis_peer_set_args&);
  nydbc_redis_peer_set_args() {
  }

  virtual ~nydbc_redis_peer_set_args() throw();
  redis_set_filter filter;

  _nydbc_redis_peer_set_args__isset __isset;

  void __set_filter(const redis_set_filter& val);

  bool operator == (const nydbc_redis_peer_set_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_set_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_set_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_set_pargs {
 public:


  virtual ~nydbc_redis_peer_set_pargs() throw();
  const redis_set_filter* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_set_result__isset {
  _nydbc_redis_peer_set_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_set_result__isset;

class nydbc_redis_peer_set_result {
 public:

  nydbc_redis_peer_set_result(const nydbc_redis_peer_set_result&);
  nydbc_redis_peer_set_result& operator=(const nydbc_redis_peer_set_result&);
  nydbc_redis_peer_set_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_set_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_peer_set_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_set_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_set_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_set_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_set_presult__isset {
  _nydbc_redis_peer_set_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_set_presult__isset;

class nydbc_redis_peer_set_presult {
 public:


  virtual ~nydbc_redis_peer_set_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_peer_set_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_hset_args__isset {
  _nydbc_redis_peer_hset_args__isset() : key(false), hkey(false), value(false) {}
  bool key :1;
  bool hkey :1;
  bool value :1;
} _nydbc_redis_peer_hset_args__isset;

class nydbc_redis_peer_hset_args {
 public:

  nydbc_redis_peer_hset_args(const nydbc_redis_peer_hset_args&);
  nydbc_redis_peer_hset_args& operator=(const nydbc_redis_peer_hset_args&);
  nydbc_redis_peer_hset_args() : key(), hkey(), value() {
  }

  virtual ~nydbc_redis_peer_hset_args() throw();
  std::string key;
  std::string hkey;
  std::string value;

  _nydbc_redis_peer_hset_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const nydbc_redis_peer_hset_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_hset_pargs {
 public:


  virtual ~nydbc_redis_peer_hset_pargs() throw();
  const std::string* key;
  const std::string* hkey;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hset_result__isset {
  _nydbc_redis_peer_hset_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hset_result__isset;

class nydbc_redis_peer_hset_result {
 public:

  nydbc_redis_peer_hset_result(const nydbc_redis_peer_hset_result&);
  nydbc_redis_peer_hset_result& operator=(const nydbc_redis_peer_hset_result&);
  nydbc_redis_peer_hset_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_hset_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_peer_hset_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_hset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hset_presult__isset {
  _nydbc_redis_peer_hset_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hset_presult__isset;

class nydbc_redis_peer_hset_presult {
 public:


  virtual ~nydbc_redis_peer_hset_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_peer_hset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_hmset_args__isset {
  _nydbc_redis_peer_hmset_args__isset() : key(false), fvs(false) {}
  bool key :1;
  bool fvs :1;
} _nydbc_redis_peer_hmset_args__isset;

class nydbc_redis_peer_hmset_args {
 public:

  nydbc_redis_peer_hmset_args(const nydbc_redis_peer_hmset_args&);
  nydbc_redis_peer_hmset_args& operator=(const nydbc_redis_peer_hmset_args&);
  nydbc_redis_peer_hmset_args() : key() {
  }

  virtual ~nydbc_redis_peer_hmset_args() throw();
  std::string key;
  std::map<std::string, std::string>  fvs;

  _nydbc_redis_peer_hmset_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_fvs(const std::map<std::string, std::string> & val);

  bool operator == (const nydbc_redis_peer_hmset_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(fvs == rhs.fvs))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hmset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hmset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_hmset_pargs {
 public:


  virtual ~nydbc_redis_peer_hmset_pargs() throw();
  const std::string* key;
  const std::map<std::string, std::string> * fvs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hmset_result__isset {
  _nydbc_redis_peer_hmset_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hmset_result__isset;

class nydbc_redis_peer_hmset_result {
 public:

  nydbc_redis_peer_hmset_result(const nydbc_redis_peer_hmset_result&);
  nydbc_redis_peer_hmset_result& operator=(const nydbc_redis_peer_hmset_result&);
  nydbc_redis_peer_hmset_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_hmset_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_peer_hmset_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_hmset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hmset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hmset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hmset_presult__isset {
  _nydbc_redis_peer_hmset_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hmset_presult__isset;

class nydbc_redis_peer_hmset_presult {
 public:


  virtual ~nydbc_redis_peer_hmset_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_peer_hmset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_hdel_args__isset {
  _nydbc_redis_peer_hdel_args__isset() : key(false), hkey(false) {}
  bool key :1;
  bool hkey :1;
} _nydbc_redis_peer_hdel_args__isset;

class nydbc_redis_peer_hdel_args {
 public:

  nydbc_redis_peer_hdel_args(const nydbc_redis_peer_hdel_args&);
  nydbc_redis_peer_hdel_args& operator=(const nydbc_redis_peer_hdel_args&);
  nydbc_redis_peer_hdel_args() : key(), hkey() {
  }

  virtual ~nydbc_redis_peer_hdel_args() throw();
  std::string key;
  std::string hkey;

  _nydbc_redis_peer_hdel_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  bool operator == (const nydbc_redis_peer_hdel_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hdel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hdel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_hdel_pargs {
 public:


  virtual ~nydbc_redis_peer_hdel_pargs() throw();
  const std::string* key;
  const std::string* hkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hdel_result__isset {
  _nydbc_redis_peer_hdel_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hdel_result__isset;

class nydbc_redis_peer_hdel_result {
 public:

  nydbc_redis_peer_hdel_result(const nydbc_redis_peer_hdel_result&);
  nydbc_redis_peer_hdel_result& operator=(const nydbc_redis_peer_hdel_result&);
  nydbc_redis_peer_hdel_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_hdel_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_peer_hdel_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_hdel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hdel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hdel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hdel_presult__isset {
  _nydbc_redis_peer_hdel_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hdel_presult__isset;

class nydbc_redis_peer_hdel_presult {
 public:


  virtual ~nydbc_redis_peer_hdel_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_peer_hdel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_hmdel_args__isset {
  _nydbc_redis_peer_hmdel_args__isset() : key(false), hkeys(false) {}
  bool key :1;
  bool hkeys :1;
} _nydbc_redis_peer_hmdel_args__isset;

class nydbc_redis_peer_hmdel_args {
 public:

  nydbc_redis_peer_hmdel_args(const nydbc_redis_peer_hmdel_args&);
  nydbc_redis_peer_hmdel_args& operator=(const nydbc_redis_peer_hmdel_args&);
  nydbc_redis_peer_hmdel_args() : key() {
  }

  virtual ~nydbc_redis_peer_hmdel_args() throw();
  std::string key;
  std::set<std::string>  hkeys;

  _nydbc_redis_peer_hmdel_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkeys(const std::set<std::string> & val);

  bool operator == (const nydbc_redis_peer_hmdel_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkeys == rhs.hkeys))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hmdel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hmdel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_hmdel_pargs {
 public:


  virtual ~nydbc_redis_peer_hmdel_pargs() throw();
  const std::string* key;
  const std::set<std::string> * hkeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hmdel_result__isset {
  _nydbc_redis_peer_hmdel_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hmdel_result__isset;

class nydbc_redis_peer_hmdel_result {
 public:

  nydbc_redis_peer_hmdel_result(const nydbc_redis_peer_hmdel_result&);
  nydbc_redis_peer_hmdel_result& operator=(const nydbc_redis_peer_hmdel_result&);
  nydbc_redis_peer_hmdel_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_hmdel_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_peer_hmdel_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_hmdel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hmdel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hmdel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hmdel_presult__isset {
  _nydbc_redis_peer_hmdel_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hmdel_presult__isset;

class nydbc_redis_peer_hmdel_presult {
 public:


  virtual ~nydbc_redis_peer_hmdel_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_peer_hmdel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_hsetex_args__isset {
  _nydbc_redis_peer_hsetex_args__isset() : key(false), hkey(false), value(false), hold_time_mseconds(false) {}
  bool key :1;
  bool hkey :1;
  bool value :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_peer_hsetex_args__isset;

class nydbc_redis_peer_hsetex_args {
 public:

  nydbc_redis_peer_hsetex_args(const nydbc_redis_peer_hsetex_args&);
  nydbc_redis_peer_hsetex_args& operator=(const nydbc_redis_peer_hsetex_args&);
  nydbc_redis_peer_hsetex_args() : key(), hkey(), value(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_peer_hsetex_args() throw();
  std::string key;
  std::string hkey;
  std::string value;
  int64_t hold_time_mseconds;

  _nydbc_redis_peer_hsetex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkey(const std::string& val);

  void __set_value(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_peer_hsetex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkey == rhs.hkey))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hsetex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hsetex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_hsetex_pargs {
 public:


  virtual ~nydbc_redis_peer_hsetex_pargs() throw();
  const std::string* key;
  const std::string* hkey;
  const std::string* value;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hsetex_result__isset {
  _nydbc_redis_peer_hsetex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hsetex_result__isset;

class nydbc_redis_peer_hsetex_result {
 public:

  nydbc_redis_peer_hsetex_result(const nydbc_redis_peer_hsetex_result&);
  nydbc_redis_peer_hsetex_result& operator=(const nydbc_redis_peer_hsetex_result&);
  nydbc_redis_peer_hsetex_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_hsetex_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_peer_hsetex_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_hsetex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hsetex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hsetex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hsetex_presult__isset {
  _nydbc_redis_peer_hsetex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hsetex_presult__isset;

class nydbc_redis_peer_hsetex_presult {
 public:


  virtual ~nydbc_redis_peer_hsetex_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_peer_hsetex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_hmsetex_args__isset {
  _nydbc_redis_peer_hmsetex_args__isset() : key(false), fvts(false) {}
  bool key :1;
  bool fvts :1;
} _nydbc_redis_peer_hmsetex_args__isset;

class nydbc_redis_peer_hmsetex_args {
 public:

  nydbc_redis_peer_hmsetex_args(const nydbc_redis_peer_hmsetex_args&);
  nydbc_redis_peer_hmsetex_args& operator=(const nydbc_redis_peer_hmsetex_args&);
  nydbc_redis_peer_hmsetex_args() : key() {
  }

  virtual ~nydbc_redis_peer_hmsetex_args() throw();
  std::string key;
  std::vector<redis_hmsetex_filter>  fvts;

  _nydbc_redis_peer_hmsetex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_fvts(const std::vector<redis_hmsetex_filter> & val);

  bool operator == (const nydbc_redis_peer_hmsetex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(fvts == rhs.fvts))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hmsetex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hmsetex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_hmsetex_pargs {
 public:


  virtual ~nydbc_redis_peer_hmsetex_pargs() throw();
  const std::string* key;
  const std::vector<redis_hmsetex_filter> * fvts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hmsetex_result__isset {
  _nydbc_redis_peer_hmsetex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hmsetex_result__isset;

class nydbc_redis_peer_hmsetex_result {
 public:

  nydbc_redis_peer_hmsetex_result(const nydbc_redis_peer_hmsetex_result&);
  nydbc_redis_peer_hmsetex_result& operator=(const nydbc_redis_peer_hmsetex_result&);
  nydbc_redis_peer_hmsetex_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_hmsetex_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_peer_hmsetex_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_hmsetex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hmsetex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hmsetex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hmsetex_presult__isset {
  _nydbc_redis_peer_hmsetex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hmsetex_presult__isset;

class nydbc_redis_peer_hmsetex_presult {
 public:


  virtual ~nydbc_redis_peer_hmsetex_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_peer_hmsetex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_hexpire_args__isset {
  _nydbc_redis_peer_hexpire_args__isset() : key(false), field(false), hold_time_mseconds(false) {}
  bool key :1;
  bool field :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_peer_hexpire_args__isset;

class nydbc_redis_peer_hexpire_args {
 public:

  nydbc_redis_peer_hexpire_args(const nydbc_redis_peer_hexpire_args&);
  nydbc_redis_peer_hexpire_args& operator=(const nydbc_redis_peer_hexpire_args&);
  nydbc_redis_peer_hexpire_args() : key(), field(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_peer_hexpire_args() throw();
  std::string key;
  std::string field;
  int64_t hold_time_mseconds;

  _nydbc_redis_peer_hexpire_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_field(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_peer_hexpire_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hexpire_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hexpire_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_hexpire_pargs {
 public:


  virtual ~nydbc_redis_peer_hexpire_pargs() throw();
  const std::string* key;
  const std::string* field;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hexpire_result__isset {
  _nydbc_redis_peer_hexpire_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hexpire_result__isset;

class nydbc_redis_peer_hexpire_result {
 public:

  nydbc_redis_peer_hexpire_result(const nydbc_redis_peer_hexpire_result&);
  nydbc_redis_peer_hexpire_result& operator=(const nydbc_redis_peer_hexpire_result&);
  nydbc_redis_peer_hexpire_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_hexpire_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_peer_hexpire_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_hexpire_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hexpire_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hexpire_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hexpire_presult__isset {
  _nydbc_redis_peer_hexpire_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hexpire_presult__isset;

class nydbc_redis_peer_hexpire_presult {
 public:


  virtual ~nydbc_redis_peer_hexpire_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_peer_hexpire_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_hdelex_args__isset {
  _nydbc_redis_peer_hdelex_args__isset() : key(false), hkeys(false) {}
  bool key :1;
  bool hkeys :1;
} _nydbc_redis_peer_hdelex_args__isset;

class nydbc_redis_peer_hdelex_args {
 public:

  nydbc_redis_peer_hdelex_args(const nydbc_redis_peer_hdelex_args&);
  nydbc_redis_peer_hdelex_args& operator=(const nydbc_redis_peer_hdelex_args&);
  nydbc_redis_peer_hdelex_args() : key() {
  }

  virtual ~nydbc_redis_peer_hdelex_args() throw();
  std::string key;
  std::set<std::string>  hkeys;

  _nydbc_redis_peer_hdelex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hkeys(const std::set<std::string> & val);

  bool operator == (const nydbc_redis_peer_hdelex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hkeys == rhs.hkeys))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hdelex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hdelex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_hdelex_pargs {
 public:


  virtual ~nydbc_redis_peer_hdelex_pargs() throw();
  const std::string* key;
  const std::set<std::string> * hkeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hdelex_result__isset {
  _nydbc_redis_peer_hdelex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hdelex_result__isset;

class nydbc_redis_peer_hdelex_result {
 public:

  nydbc_redis_peer_hdelex_result(const nydbc_redis_peer_hdelex_result&);
  nydbc_redis_peer_hdelex_result& operator=(const nydbc_redis_peer_hdelex_result&);
  nydbc_redis_peer_hdelex_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_hdelex_result() throw();
  int64_t success;
  db_exception dberr;

  _nydbc_redis_peer_hdelex_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_hdelex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_hdelex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_hdelex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_hdelex_presult__isset {
  _nydbc_redis_peer_hdelex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_hdelex_presult__isset;

class nydbc_redis_peer_hdelex_presult {
 public:


  virtual ~nydbc_redis_peer_hdelex_presult() throw();
  int64_t* success;
  db_exception dberr;

  _nydbc_redis_peer_hdelex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _nydbc_redis_peer_pexpireex_args__isset {
  _nydbc_redis_peer_pexpireex_args__isset() : key(false), hold_time_mseconds(false) {}
  bool key :1;
  bool hold_time_mseconds :1;
} _nydbc_redis_peer_pexpireex_args__isset;

class nydbc_redis_peer_pexpireex_args {
 public:

  nydbc_redis_peer_pexpireex_args(const nydbc_redis_peer_pexpireex_args&);
  nydbc_redis_peer_pexpireex_args& operator=(const nydbc_redis_peer_pexpireex_args&);
  nydbc_redis_peer_pexpireex_args() : key(), hold_time_mseconds(0) {
  }

  virtual ~nydbc_redis_peer_pexpireex_args() throw();
  std::string key;
  int64_t hold_time_mseconds;

  _nydbc_redis_peer_pexpireex_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_hold_time_mseconds(const int64_t val);

  bool operator == (const nydbc_redis_peer_pexpireex_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(hold_time_mseconds == rhs.hold_time_mseconds))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_pexpireex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_pexpireex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nydbc_redis_peer_pexpireex_pargs {
 public:


  virtual ~nydbc_redis_peer_pexpireex_pargs() throw();
  const std::string* key;
  const int64_t* hold_time_mseconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_pexpireex_result__isset {
  _nydbc_redis_peer_pexpireex_result__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_pexpireex_result__isset;

class nydbc_redis_peer_pexpireex_result {
 public:

  nydbc_redis_peer_pexpireex_result(const nydbc_redis_peer_pexpireex_result&);
  nydbc_redis_peer_pexpireex_result& operator=(const nydbc_redis_peer_pexpireex_result&);
  nydbc_redis_peer_pexpireex_result() : success(0) {
  }

  virtual ~nydbc_redis_peer_pexpireex_result() throw();
  bool success;
  db_exception dberr;

  _nydbc_redis_peer_pexpireex_result__isset __isset;

  void __set_success(const bool val);

  void __set_dberr(const db_exception& val);

  bool operator == (const nydbc_redis_peer_pexpireex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(dberr == rhs.dberr))
      return false;
    return true;
  }
  bool operator != (const nydbc_redis_peer_pexpireex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nydbc_redis_peer_pexpireex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nydbc_redis_peer_pexpireex_presult__isset {
  _nydbc_redis_peer_pexpireex_presult__isset() : success(false), dberr(false) {}
  bool success :1;
  bool dberr :1;
} _nydbc_redis_peer_pexpireex_presult__isset;

class nydbc_redis_peer_pexpireex_presult {
 public:


  virtual ~nydbc_redis_peer_pexpireex_presult() throw();
  bool* success;
  db_exception dberr;

  _nydbc_redis_peer_pexpireex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class nydbcClient : virtual public nydbcIf {
 public:
  nydbcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  nydbcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  void send_ping();
  bool recv_ping();
  void start(sql_batch& _return, const sql_batch_filter& filter);
  void send_start(const sql_batch_filter& filter);
  void recv_start(sql_batch& _return);
  bool commit(const sql_batch& batch);
  void send_commit(const sql_batch& batch);
  bool recv_commit();
  bool rollback(const sql_batch& batch);
  void send_rollback(const sql_batch& batch);
  bool recv_rollback();
  void lock(std::string& _return, const db_lock& lock);
  void send_lock(const db_lock& lock);
  void recv_lock(std::string& _return);
  bool unlock(const std::string& lock, const std::string& owner);
  void send_unlock(const std::string& lock, const std::string& owner);
  bool recv_unlock();
  bool uplock(const std::string& lock, const std::string& owner, const int64_t hold_time_mseconds);
  void send_uplock(const std::string& lock, const std::string& owner, const int64_t hold_time_mseconds);
  bool recv_uplock();
  void sql_query(std::vector<std::map<std::string, std::string> > & _return, const sql_query_filter& filter);
  void send_sql_query(const sql_query_filter& filter);
  void recv_sql_query(std::vector<std::map<std::string, std::string> > & _return);
  int64_t sql_update(const sql_update_filter& filter);
  void send_sql_update(const sql_update_filter& filter);
  int64_t recv_sql_update();
  void sql_update_with_return(sql_update_return& _return, const sql_update_filter& filter);
  void send_sql_update_with_return(const sql_update_filter& filter);
  void recv_sql_update_with_return(sql_update_return& _return);
  bool redis_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  void send_redis_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_pexpire();
  int64_t redis_del(const redis_del_filter& filter);
  void send_redis_del(const redis_del_filter& filter);
  int64_t recv_redis_del();
  int64_t redis_incrby(const std::string& key, const int64_t step);
  void send_redis_incrby(const std::string& key, const int64_t step);
  int64_t recv_redis_incrby();
  bool redis_set(const redis_set_filter& filter);
  void send_redis_set(const redis_set_filter& filter);
  bool recv_redis_set();
  void redis_get(std::string& _return, const std::string& key);
  void send_redis_get(const std::string& key);
  void recv_redis_get(std::string& _return);
  bool redis_hset(const std::string& key, const std::string& hkey, const std::string& value);
  void send_redis_hset(const std::string& key, const std::string& hkey, const std::string& value);
  bool recv_redis_hset();
  bool redis_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  void send_redis_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  bool recv_redis_hmset();
  int64_t redis_hdel(const std::string& key, const std::string& hkey);
  void send_redis_hdel(const std::string& key, const std::string& hkey);
  int64_t recv_redis_hdel();
  int64_t redis_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  void send_redis_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_hmdel();
  void redis_hget(std::string& _return, const std::string& key, const std::string& hkey);
  void send_redis_hget(const std::string& key, const std::string& hkey);
  void recv_redis_hget(std::string& _return);
  void redis_hmget(std::map<std::string, std::string> & _return, const std::string& key, const std::set<std::string> & hks);
  void send_redis_hmget(const std::string& key, const std::set<std::string> & hks);
  void recv_redis_hmget(std::map<std::string, std::string> & _return);
  int64_t redis_hlen(const std::string& key);
  void send_redis_hlen(const std::string& key);
  int64_t recv_redis_hlen();
  void redis_hgetall(std::map<std::string, std::string> & _return, const std::string& key);
  void send_redis_hgetall(const std::string& key);
  void recv_redis_hgetall(std::map<std::string, std::string> & _return);
  void redis_keys(std::vector<std::string> & _return, const std::string& reg);
  void send_redis_keys(const std::string& reg);
  void recv_redis_keys(std::vector<std::string> & _return);
  bool redis_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  void send_redis_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  bool recv_redis_hsetex();
  bool redis_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  void send_redis_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  bool recv_redis_hmsetex();
  void redis_hgetex(std::string& _return, const std::string& key, const std::string& hkey);
  void send_redis_hgetex(const std::string& key, const std::string& hkey);
  void recv_redis_hgetex(std::string& _return);
  void redis_hmgetex(std::map<std::string, std::string> & _return, const std::string& key, const std::set<std::string> & hkeys);
  void send_redis_hmgetex(const std::string& key, const std::set<std::string> & hkeys);
  void recv_redis_hmgetex(std::map<std::string, std::string> & _return);
  bool redis_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  void send_redis_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  bool recv_redis_hexpire();
  int64_t redis_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  void send_redis_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_hdelex();
  int64_t redis_hlenex(const std::string& key);
  void send_redis_hlenex(const std::string& key);
  int64_t recv_redis_hlenex();
  void redis_hgetallex(std::map<std::string, std::string> & _return, const std::string& key);
  void send_redis_hgetallex(const std::string& key);
  void recv_redis_hgetallex(std::map<std::string, std::string> & _return);
  bool redis_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  void send_redis_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_pexpireex();
  void get_region(std::vector<region_out> & _return, const region_filter& filter);
  void send_get_region(const region_filter& filter);
  void recv_get_region(std::vector<region_out> & _return);
  bool put_region(const std::vector<region> & regions);
  void send_put_region(const std::vector<region> & regions);
  bool recv_put_region();
  bool redis_global_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  void send_redis_global_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_global_pexpire();
  int64_t redis_global_del(const redis_del_filter& filter);
  void send_redis_global_del(const redis_del_filter& filter);
  int64_t recv_redis_global_del();
  bool redis_global_set(const redis_set_filter& filter);
  void send_redis_global_set(const redis_set_filter& filter);
  bool recv_redis_global_set();
  bool redis_global_hset(const std::string& key, const std::string& hkey, const std::string& value);
  void send_redis_global_hset(const std::string& key, const std::string& hkey, const std::string& value);
  bool recv_redis_global_hset();
  bool redis_global_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  void send_redis_global_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  bool recv_redis_global_hmset();
  int64_t redis_global_hdel(const std::string& key, const std::string& hkey);
  void send_redis_global_hdel(const std::string& key, const std::string& hkey);
  int64_t recv_redis_global_hdel();
  int64_t redis_global_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  void send_redis_global_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_global_hmdel();
  bool redis_global_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  void send_redis_global_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  bool recv_redis_global_hsetex();
  bool redis_global_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  void send_redis_global_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  bool recv_redis_global_hmsetex();
  bool redis_global_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  void send_redis_global_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  bool recv_redis_global_hexpire();
  int64_t redis_global_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  void send_redis_global_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_global_hdelex();
  bool redis_global_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  void send_redis_global_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_global_pexpireex();
  bool redis_peer_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  void send_redis_peer_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_peer_pexpire();
  int64_t redis_peer_del(const redis_del_filter& filter);
  void send_redis_peer_del(const redis_del_filter& filter);
  int64_t recv_redis_peer_del();
  bool redis_peer_set(const redis_set_filter& filter);
  void send_redis_peer_set(const redis_set_filter& filter);
  bool recv_redis_peer_set();
  bool redis_peer_hset(const std::string& key, const std::string& hkey, const std::string& value);
  void send_redis_peer_hset(const std::string& key, const std::string& hkey, const std::string& value);
  bool recv_redis_peer_hset();
  bool redis_peer_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  void send_redis_peer_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  bool recv_redis_peer_hmset();
  int64_t redis_peer_hdel(const std::string& key, const std::string& hkey);
  void send_redis_peer_hdel(const std::string& key, const std::string& hkey);
  int64_t recv_redis_peer_hdel();
  int64_t redis_peer_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  void send_redis_peer_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_peer_hmdel();
  bool redis_peer_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  void send_redis_peer_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  bool recv_redis_peer_hsetex();
  bool redis_peer_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  void send_redis_peer_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  bool recv_redis_peer_hmsetex();
  bool redis_peer_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  void send_redis_peer_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  bool recv_redis_peer_hexpire();
  int64_t redis_peer_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  void send_redis_peer_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_peer_hdelex();
  bool redis_peer_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  void send_redis_peer_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_peer_pexpireex();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class nydbcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<nydbcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (nydbcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rollback(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uplock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_update_with_return(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_pexpire(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_del(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_incrby(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hmset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hdel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hmdel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hget(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hmget(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hlen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hgetall(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_keys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hsetex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hmsetex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hgetex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hmgetex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hexpire(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hdelex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hlenex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_hgetallex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_pexpireex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_region(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put_region(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_pexpire(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_del(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_hset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_hmset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_hdel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_hmdel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_hsetex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_hmsetex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_hexpire(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_hdelex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_global_pexpireex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_pexpire(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_del(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_hset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_hmset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_hdel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_hmdel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_hsetex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_hmsetex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_hexpire(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_hdelex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redis_peer_pexpireex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  nydbcProcessor(::apache::thrift::stdcxx::shared_ptr<nydbcIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &nydbcProcessor::process_ping;
    processMap_["start"] = &nydbcProcessor::process_start;
    processMap_["commit"] = &nydbcProcessor::process_commit;
    processMap_["rollback"] = &nydbcProcessor::process_rollback;
    processMap_["lock"] = &nydbcProcessor::process_lock;
    processMap_["unlock"] = &nydbcProcessor::process_unlock;
    processMap_["uplock"] = &nydbcProcessor::process_uplock;
    processMap_["sql_query"] = &nydbcProcessor::process_sql_query;
    processMap_["sql_update"] = &nydbcProcessor::process_sql_update;
    processMap_["sql_update_with_return"] = &nydbcProcessor::process_sql_update_with_return;
    processMap_["redis_pexpire"] = &nydbcProcessor::process_redis_pexpire;
    processMap_["redis_del"] = &nydbcProcessor::process_redis_del;
    processMap_["redis_incrby"] = &nydbcProcessor::process_redis_incrby;
    processMap_["redis_set"] = &nydbcProcessor::process_redis_set;
    processMap_["redis_get"] = &nydbcProcessor::process_redis_get;
    processMap_["redis_hset"] = &nydbcProcessor::process_redis_hset;
    processMap_["redis_hmset"] = &nydbcProcessor::process_redis_hmset;
    processMap_["redis_hdel"] = &nydbcProcessor::process_redis_hdel;
    processMap_["redis_hmdel"] = &nydbcProcessor::process_redis_hmdel;
    processMap_["redis_hget"] = &nydbcProcessor::process_redis_hget;
    processMap_["redis_hmget"] = &nydbcProcessor::process_redis_hmget;
    processMap_["redis_hlen"] = &nydbcProcessor::process_redis_hlen;
    processMap_["redis_hgetall"] = &nydbcProcessor::process_redis_hgetall;
    processMap_["redis_keys"] = &nydbcProcessor::process_redis_keys;
    processMap_["redis_hsetex"] = &nydbcProcessor::process_redis_hsetex;
    processMap_["redis_hmsetex"] = &nydbcProcessor::process_redis_hmsetex;
    processMap_["redis_hgetex"] = &nydbcProcessor::process_redis_hgetex;
    processMap_["redis_hmgetex"] = &nydbcProcessor::process_redis_hmgetex;
    processMap_["redis_hexpire"] = &nydbcProcessor::process_redis_hexpire;
    processMap_["redis_hdelex"] = &nydbcProcessor::process_redis_hdelex;
    processMap_["redis_hlenex"] = &nydbcProcessor::process_redis_hlenex;
    processMap_["redis_hgetallex"] = &nydbcProcessor::process_redis_hgetallex;
    processMap_["redis_pexpireex"] = &nydbcProcessor::process_redis_pexpireex;
    processMap_["get_region"] = &nydbcProcessor::process_get_region;
    processMap_["put_region"] = &nydbcProcessor::process_put_region;
    processMap_["redis_global_pexpire"] = &nydbcProcessor::process_redis_global_pexpire;
    processMap_["redis_global_del"] = &nydbcProcessor::process_redis_global_del;
    processMap_["redis_global_set"] = &nydbcProcessor::process_redis_global_set;
    processMap_["redis_global_hset"] = &nydbcProcessor::process_redis_global_hset;
    processMap_["redis_global_hmset"] = &nydbcProcessor::process_redis_global_hmset;
    processMap_["redis_global_hdel"] = &nydbcProcessor::process_redis_global_hdel;
    processMap_["redis_global_hmdel"] = &nydbcProcessor::process_redis_global_hmdel;
    processMap_["redis_global_hsetex"] = &nydbcProcessor::process_redis_global_hsetex;
    processMap_["redis_global_hmsetex"] = &nydbcProcessor::process_redis_global_hmsetex;
    processMap_["redis_global_hexpire"] = &nydbcProcessor::process_redis_global_hexpire;
    processMap_["redis_global_hdelex"] = &nydbcProcessor::process_redis_global_hdelex;
    processMap_["redis_global_pexpireex"] = &nydbcProcessor::process_redis_global_pexpireex;
    processMap_["redis_peer_pexpire"] = &nydbcProcessor::process_redis_peer_pexpire;
    processMap_["redis_peer_del"] = &nydbcProcessor::process_redis_peer_del;
    processMap_["redis_peer_set"] = &nydbcProcessor::process_redis_peer_set;
    processMap_["redis_peer_hset"] = &nydbcProcessor::process_redis_peer_hset;
    processMap_["redis_peer_hmset"] = &nydbcProcessor::process_redis_peer_hmset;
    processMap_["redis_peer_hdel"] = &nydbcProcessor::process_redis_peer_hdel;
    processMap_["redis_peer_hmdel"] = &nydbcProcessor::process_redis_peer_hmdel;
    processMap_["redis_peer_hsetex"] = &nydbcProcessor::process_redis_peer_hsetex;
    processMap_["redis_peer_hmsetex"] = &nydbcProcessor::process_redis_peer_hmsetex;
    processMap_["redis_peer_hexpire"] = &nydbcProcessor::process_redis_peer_hexpire;
    processMap_["redis_peer_hdelex"] = &nydbcProcessor::process_redis_peer_hdelex;
    processMap_["redis_peer_pexpireex"] = &nydbcProcessor::process_redis_peer_pexpireex;
  }

  virtual ~nydbcProcessor() {}
};

class nydbcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  nydbcProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< nydbcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< nydbcIfFactory > handlerFactory_;
};

class nydbcMultiface : virtual public nydbcIf {
 public:
  nydbcMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<nydbcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~nydbcMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<nydbcIf> > ifaces_;
  nydbcMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<nydbcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void start(sql_batch& _return, const sql_batch_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start(_return, filter);
    }
    ifaces_[i]->start(_return, filter);
    return;
  }

  bool commit(const sql_batch& batch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commit(batch);
    }
    return ifaces_[i]->commit(batch);
  }

  bool rollback(const sql_batch& batch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rollback(batch);
    }
    return ifaces_[i]->rollback(batch);
  }

  void lock(std::string& _return, const db_lock& lock) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lock(_return, lock);
    }
    ifaces_[i]->lock(_return, lock);
    return;
  }

  bool unlock(const std::string& lock, const std::string& owner) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlock(lock, owner);
    }
    return ifaces_[i]->unlock(lock, owner);
  }

  bool uplock(const std::string& lock, const std::string& owner, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uplock(lock, owner, hold_time_mseconds);
    }
    return ifaces_[i]->uplock(lock, owner, hold_time_mseconds);
  }

  void sql_query(std::vector<std::map<std::string, std::string> > & _return, const sql_query_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_query(_return, filter);
    }
    ifaces_[i]->sql_query(_return, filter);
    return;
  }

  int64_t sql_update(const sql_update_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_update(filter);
    }
    return ifaces_[i]->sql_update(filter);
  }

  void sql_update_with_return(sql_update_return& _return, const sql_update_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_update_with_return(_return, filter);
    }
    ifaces_[i]->sql_update_with_return(_return, filter);
    return;
  }

  bool redis_pexpire(const std::string& key, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_pexpire(key, hold_time_mseconds);
    }
    return ifaces_[i]->redis_pexpire(key, hold_time_mseconds);
  }

  int64_t redis_del(const redis_del_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_del(filter);
    }
    return ifaces_[i]->redis_del(filter);
  }

  int64_t redis_incrby(const std::string& key, const int64_t step) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_incrby(key, step);
    }
    return ifaces_[i]->redis_incrby(key, step);
  }

  bool redis_set(const redis_set_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_set(filter);
    }
    return ifaces_[i]->redis_set(filter);
  }

  void redis_get(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_get(_return, key);
    }
    ifaces_[i]->redis_get(_return, key);
    return;
  }

  bool redis_hset(const std::string& key, const std::string& hkey, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hset(key, hkey, value);
    }
    return ifaces_[i]->redis_hset(key, hkey, value);
  }

  bool redis_hmset(const std::string& key, const std::map<std::string, std::string> & fvs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hmset(key, fvs);
    }
    return ifaces_[i]->redis_hmset(key, fvs);
  }

  int64_t redis_hdel(const std::string& key, const std::string& hkey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hdel(key, hkey);
    }
    return ifaces_[i]->redis_hdel(key, hkey);
  }

  int64_t redis_hmdel(const std::string& key, const std::set<std::string> & hkeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hmdel(key, hkeys);
    }
    return ifaces_[i]->redis_hmdel(key, hkeys);
  }

  void redis_hget(std::string& _return, const std::string& key, const std::string& hkey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hget(_return, key, hkey);
    }
    ifaces_[i]->redis_hget(_return, key, hkey);
    return;
  }

  void redis_hmget(std::map<std::string, std::string> & _return, const std::string& key, const std::set<std::string> & hks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hmget(_return, key, hks);
    }
    ifaces_[i]->redis_hmget(_return, key, hks);
    return;
  }

  int64_t redis_hlen(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hlen(key);
    }
    return ifaces_[i]->redis_hlen(key);
  }

  void redis_hgetall(std::map<std::string, std::string> & _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hgetall(_return, key);
    }
    ifaces_[i]->redis_hgetall(_return, key);
    return;
  }

  void redis_keys(std::vector<std::string> & _return, const std::string& reg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_keys(_return, reg);
    }
    ifaces_[i]->redis_keys(_return, reg);
    return;
  }

  bool redis_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hsetex(key, hkey, value, hold_time_mseconds);
    }
    return ifaces_[i]->redis_hsetex(key, hkey, value, hold_time_mseconds);
  }

  bool redis_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hmsetex(key, fvts);
    }
    return ifaces_[i]->redis_hmsetex(key, fvts);
  }

  void redis_hgetex(std::string& _return, const std::string& key, const std::string& hkey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hgetex(_return, key, hkey);
    }
    ifaces_[i]->redis_hgetex(_return, key, hkey);
    return;
  }

  void redis_hmgetex(std::map<std::string, std::string> & _return, const std::string& key, const std::set<std::string> & hkeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hmgetex(_return, key, hkeys);
    }
    ifaces_[i]->redis_hmgetex(_return, key, hkeys);
    return;
  }

  bool redis_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hexpire(key, field, hold_time_mseconds);
    }
    return ifaces_[i]->redis_hexpire(key, field, hold_time_mseconds);
  }

  int64_t redis_hdelex(const std::string& key, const std::set<std::string> & hkeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hdelex(key, hkeys);
    }
    return ifaces_[i]->redis_hdelex(key, hkeys);
  }

  int64_t redis_hlenex(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hlenex(key);
    }
    return ifaces_[i]->redis_hlenex(key);
  }

  void redis_hgetallex(std::map<std::string, std::string> & _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_hgetallex(_return, key);
    }
    ifaces_[i]->redis_hgetallex(_return, key);
    return;
  }

  bool redis_pexpireex(const std::string& key, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_pexpireex(key, hold_time_mseconds);
    }
    return ifaces_[i]->redis_pexpireex(key, hold_time_mseconds);
  }

  void get_region(std::vector<region_out> & _return, const region_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_region(_return, filter);
    }
    ifaces_[i]->get_region(_return, filter);
    return;
  }

  bool put_region(const std::vector<region> & regions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put_region(regions);
    }
    return ifaces_[i]->put_region(regions);
  }

  bool redis_global_pexpire(const std::string& key, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_pexpire(key, hold_time_mseconds);
    }
    return ifaces_[i]->redis_global_pexpire(key, hold_time_mseconds);
  }

  int64_t redis_global_del(const redis_del_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_del(filter);
    }
    return ifaces_[i]->redis_global_del(filter);
  }

  bool redis_global_set(const redis_set_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_set(filter);
    }
    return ifaces_[i]->redis_global_set(filter);
  }

  bool redis_global_hset(const std::string& key, const std::string& hkey, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_hset(key, hkey, value);
    }
    return ifaces_[i]->redis_global_hset(key, hkey, value);
  }

  bool redis_global_hmset(const std::string& key, const std::map<std::string, std::string> & fvs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_hmset(key, fvs);
    }
    return ifaces_[i]->redis_global_hmset(key, fvs);
  }

  int64_t redis_global_hdel(const std::string& key, const std::string& hkey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_hdel(key, hkey);
    }
    return ifaces_[i]->redis_global_hdel(key, hkey);
  }

  int64_t redis_global_hmdel(const std::string& key, const std::set<std::string> & hkeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_hmdel(key, hkeys);
    }
    return ifaces_[i]->redis_global_hmdel(key, hkeys);
  }

  bool redis_global_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_hsetex(key, hkey, value, hold_time_mseconds);
    }
    return ifaces_[i]->redis_global_hsetex(key, hkey, value, hold_time_mseconds);
  }

  bool redis_global_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_hmsetex(key, fvts);
    }
    return ifaces_[i]->redis_global_hmsetex(key, fvts);
  }

  bool redis_global_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_hexpire(key, field, hold_time_mseconds);
    }
    return ifaces_[i]->redis_global_hexpire(key, field, hold_time_mseconds);
  }

  int64_t redis_global_hdelex(const std::string& key, const std::set<std::string> & hkeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_hdelex(key, hkeys);
    }
    return ifaces_[i]->redis_global_hdelex(key, hkeys);
  }

  bool redis_global_pexpireex(const std::string& key, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_global_pexpireex(key, hold_time_mseconds);
    }
    return ifaces_[i]->redis_global_pexpireex(key, hold_time_mseconds);
  }

  bool redis_peer_pexpire(const std::string& key, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_pexpire(key, hold_time_mseconds);
    }
    return ifaces_[i]->redis_peer_pexpire(key, hold_time_mseconds);
  }

  int64_t redis_peer_del(const redis_del_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_del(filter);
    }
    return ifaces_[i]->redis_peer_del(filter);
  }

  bool redis_peer_set(const redis_set_filter& filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_set(filter);
    }
    return ifaces_[i]->redis_peer_set(filter);
  }

  bool redis_peer_hset(const std::string& key, const std::string& hkey, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_hset(key, hkey, value);
    }
    return ifaces_[i]->redis_peer_hset(key, hkey, value);
  }

  bool redis_peer_hmset(const std::string& key, const std::map<std::string, std::string> & fvs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_hmset(key, fvs);
    }
    return ifaces_[i]->redis_peer_hmset(key, fvs);
  }

  int64_t redis_peer_hdel(const std::string& key, const std::string& hkey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_hdel(key, hkey);
    }
    return ifaces_[i]->redis_peer_hdel(key, hkey);
  }

  int64_t redis_peer_hmdel(const std::string& key, const std::set<std::string> & hkeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_hmdel(key, hkeys);
    }
    return ifaces_[i]->redis_peer_hmdel(key, hkeys);
  }

  bool redis_peer_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_hsetex(key, hkey, value, hold_time_mseconds);
    }
    return ifaces_[i]->redis_peer_hsetex(key, hkey, value, hold_time_mseconds);
  }

  bool redis_peer_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_hmsetex(key, fvts);
    }
    return ifaces_[i]->redis_peer_hmsetex(key, fvts);
  }

  bool redis_peer_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_hexpire(key, field, hold_time_mseconds);
    }
    return ifaces_[i]->redis_peer_hexpire(key, field, hold_time_mseconds);
  }

  int64_t redis_peer_hdelex(const std::string& key, const std::set<std::string> & hkeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_hdelex(key, hkeys);
    }
    return ifaces_[i]->redis_peer_hdelex(key, hkeys);
  }

  bool redis_peer_pexpireex(const std::string& key, const int64_t hold_time_mseconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redis_peer_pexpireex(key, hold_time_mseconds);
    }
    return ifaces_[i]->redis_peer_pexpireex(key, hold_time_mseconds);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class nydbcConcurrentClient : virtual public nydbcIf {
 public:
  nydbcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  nydbcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  int32_t send_ping();
  bool recv_ping(const int32_t seqid);
  void start(sql_batch& _return, const sql_batch_filter& filter);
  int32_t send_start(const sql_batch_filter& filter);
  void recv_start(sql_batch& _return, const int32_t seqid);
  bool commit(const sql_batch& batch);
  int32_t send_commit(const sql_batch& batch);
  bool recv_commit(const int32_t seqid);
  bool rollback(const sql_batch& batch);
  int32_t send_rollback(const sql_batch& batch);
  bool recv_rollback(const int32_t seqid);
  void lock(std::string& _return, const db_lock& lock);
  int32_t send_lock(const db_lock& lock);
  void recv_lock(std::string& _return, const int32_t seqid);
  bool unlock(const std::string& lock, const std::string& owner);
  int32_t send_unlock(const std::string& lock, const std::string& owner);
  bool recv_unlock(const int32_t seqid);
  bool uplock(const std::string& lock, const std::string& owner, const int64_t hold_time_mseconds);
  int32_t send_uplock(const std::string& lock, const std::string& owner, const int64_t hold_time_mseconds);
  bool recv_uplock(const int32_t seqid);
  void sql_query(std::vector<std::map<std::string, std::string> > & _return, const sql_query_filter& filter);
  int32_t send_sql_query(const sql_query_filter& filter);
  void recv_sql_query(std::vector<std::map<std::string, std::string> > & _return, const int32_t seqid);
  int64_t sql_update(const sql_update_filter& filter);
  int32_t send_sql_update(const sql_update_filter& filter);
  int64_t recv_sql_update(const int32_t seqid);
  void sql_update_with_return(sql_update_return& _return, const sql_update_filter& filter);
  int32_t send_sql_update_with_return(const sql_update_filter& filter);
  void recv_sql_update_with_return(sql_update_return& _return, const int32_t seqid);
  bool redis_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  int32_t send_redis_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_pexpire(const int32_t seqid);
  int64_t redis_del(const redis_del_filter& filter);
  int32_t send_redis_del(const redis_del_filter& filter);
  int64_t recv_redis_del(const int32_t seqid);
  int64_t redis_incrby(const std::string& key, const int64_t step);
  int32_t send_redis_incrby(const std::string& key, const int64_t step);
  int64_t recv_redis_incrby(const int32_t seqid);
  bool redis_set(const redis_set_filter& filter);
  int32_t send_redis_set(const redis_set_filter& filter);
  bool recv_redis_set(const int32_t seqid);
  void redis_get(std::string& _return, const std::string& key);
  int32_t send_redis_get(const std::string& key);
  void recv_redis_get(std::string& _return, const int32_t seqid);
  bool redis_hset(const std::string& key, const std::string& hkey, const std::string& value);
  int32_t send_redis_hset(const std::string& key, const std::string& hkey, const std::string& value);
  bool recv_redis_hset(const int32_t seqid);
  bool redis_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  int32_t send_redis_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  bool recv_redis_hmset(const int32_t seqid);
  int64_t redis_hdel(const std::string& key, const std::string& hkey);
  int32_t send_redis_hdel(const std::string& key, const std::string& hkey);
  int64_t recv_redis_hdel(const int32_t seqid);
  int64_t redis_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  int32_t send_redis_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_hmdel(const int32_t seqid);
  void redis_hget(std::string& _return, const std::string& key, const std::string& hkey);
  int32_t send_redis_hget(const std::string& key, const std::string& hkey);
  void recv_redis_hget(std::string& _return, const int32_t seqid);
  void redis_hmget(std::map<std::string, std::string> & _return, const std::string& key, const std::set<std::string> & hks);
  int32_t send_redis_hmget(const std::string& key, const std::set<std::string> & hks);
  void recv_redis_hmget(std::map<std::string, std::string> & _return, const int32_t seqid);
  int64_t redis_hlen(const std::string& key);
  int32_t send_redis_hlen(const std::string& key);
  int64_t recv_redis_hlen(const int32_t seqid);
  void redis_hgetall(std::map<std::string, std::string> & _return, const std::string& key);
  int32_t send_redis_hgetall(const std::string& key);
  void recv_redis_hgetall(std::map<std::string, std::string> & _return, const int32_t seqid);
  void redis_keys(std::vector<std::string> & _return, const std::string& reg);
  int32_t send_redis_keys(const std::string& reg);
  void recv_redis_keys(std::vector<std::string> & _return, const int32_t seqid);
  bool redis_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  int32_t send_redis_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  bool recv_redis_hsetex(const int32_t seqid);
  bool redis_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  int32_t send_redis_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  bool recv_redis_hmsetex(const int32_t seqid);
  void redis_hgetex(std::string& _return, const std::string& key, const std::string& hkey);
  int32_t send_redis_hgetex(const std::string& key, const std::string& hkey);
  void recv_redis_hgetex(std::string& _return, const int32_t seqid);
  void redis_hmgetex(std::map<std::string, std::string> & _return, const std::string& key, const std::set<std::string> & hkeys);
  int32_t send_redis_hmgetex(const std::string& key, const std::set<std::string> & hkeys);
  void recv_redis_hmgetex(std::map<std::string, std::string> & _return, const int32_t seqid);
  bool redis_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  int32_t send_redis_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  bool recv_redis_hexpire(const int32_t seqid);
  int64_t redis_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  int32_t send_redis_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_hdelex(const int32_t seqid);
  int64_t redis_hlenex(const std::string& key);
  int32_t send_redis_hlenex(const std::string& key);
  int64_t recv_redis_hlenex(const int32_t seqid);
  void redis_hgetallex(std::map<std::string, std::string> & _return, const std::string& key);
  int32_t send_redis_hgetallex(const std::string& key);
  void recv_redis_hgetallex(std::map<std::string, std::string> & _return, const int32_t seqid);
  bool redis_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  int32_t send_redis_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_pexpireex(const int32_t seqid);
  void get_region(std::vector<region_out> & _return, const region_filter& filter);
  int32_t send_get_region(const region_filter& filter);
  void recv_get_region(std::vector<region_out> & _return, const int32_t seqid);
  bool put_region(const std::vector<region> & regions);
  int32_t send_put_region(const std::vector<region> & regions);
  bool recv_put_region(const int32_t seqid);
  bool redis_global_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  int32_t send_redis_global_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_global_pexpire(const int32_t seqid);
  int64_t redis_global_del(const redis_del_filter& filter);
  int32_t send_redis_global_del(const redis_del_filter& filter);
  int64_t recv_redis_global_del(const int32_t seqid);
  bool redis_global_set(const redis_set_filter& filter);
  int32_t send_redis_global_set(const redis_set_filter& filter);
  bool recv_redis_global_set(const int32_t seqid);
  bool redis_global_hset(const std::string& key, const std::string& hkey, const std::string& value);
  int32_t send_redis_global_hset(const std::string& key, const std::string& hkey, const std::string& value);
  bool recv_redis_global_hset(const int32_t seqid);
  bool redis_global_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  int32_t send_redis_global_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  bool recv_redis_global_hmset(const int32_t seqid);
  int64_t redis_global_hdel(const std::string& key, const std::string& hkey);
  int32_t send_redis_global_hdel(const std::string& key, const std::string& hkey);
  int64_t recv_redis_global_hdel(const int32_t seqid);
  int64_t redis_global_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  int32_t send_redis_global_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_global_hmdel(const int32_t seqid);
  bool redis_global_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  int32_t send_redis_global_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  bool recv_redis_global_hsetex(const int32_t seqid);
  bool redis_global_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  int32_t send_redis_global_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  bool recv_redis_global_hmsetex(const int32_t seqid);
  bool redis_global_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  int32_t send_redis_global_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  bool recv_redis_global_hexpire(const int32_t seqid);
  int64_t redis_global_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  int32_t send_redis_global_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_global_hdelex(const int32_t seqid);
  bool redis_global_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  int32_t send_redis_global_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_global_pexpireex(const int32_t seqid);
  bool redis_peer_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  int32_t send_redis_peer_pexpire(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_peer_pexpire(const int32_t seqid);
  int64_t redis_peer_del(const redis_del_filter& filter);
  int32_t send_redis_peer_del(const redis_del_filter& filter);
  int64_t recv_redis_peer_del(const int32_t seqid);
  bool redis_peer_set(const redis_set_filter& filter);
  int32_t send_redis_peer_set(const redis_set_filter& filter);
  bool recv_redis_peer_set(const int32_t seqid);
  bool redis_peer_hset(const std::string& key, const std::string& hkey, const std::string& value);
  int32_t send_redis_peer_hset(const std::string& key, const std::string& hkey, const std::string& value);
  bool recv_redis_peer_hset(const int32_t seqid);
  bool redis_peer_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  int32_t send_redis_peer_hmset(const std::string& key, const std::map<std::string, std::string> & fvs);
  bool recv_redis_peer_hmset(const int32_t seqid);
  int64_t redis_peer_hdel(const std::string& key, const std::string& hkey);
  int32_t send_redis_peer_hdel(const std::string& key, const std::string& hkey);
  int64_t recv_redis_peer_hdel(const int32_t seqid);
  int64_t redis_peer_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  int32_t send_redis_peer_hmdel(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_peer_hmdel(const int32_t seqid);
  bool redis_peer_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  int32_t send_redis_peer_hsetex(const std::string& key, const std::string& hkey, const std::string& value, const int64_t hold_time_mseconds);
  bool recv_redis_peer_hsetex(const int32_t seqid);
  bool redis_peer_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  int32_t send_redis_peer_hmsetex(const std::string& key, const std::vector<redis_hmsetex_filter> & fvts);
  bool recv_redis_peer_hmsetex(const int32_t seqid);
  bool redis_peer_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  int32_t send_redis_peer_hexpire(const std::string& key, const std::string& field, const int64_t hold_time_mseconds);
  bool recv_redis_peer_hexpire(const int32_t seqid);
  int64_t redis_peer_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  int32_t send_redis_peer_hdelex(const std::string& key, const std::set<std::string> & hkeys);
  int64_t recv_redis_peer_hdelex(const int32_t seqid);
  bool redis_peer_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  int32_t send_redis_peer_pexpireex(const std::string& key, const int64_t hold_time_mseconds);
  bool recv_redis_peer_pexpireex(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}} // namespace

#endif
